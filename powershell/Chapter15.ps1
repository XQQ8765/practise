## Chapter15 in book "Windows PowerShell Cookbook"
## Chapter15. Tracing and Error Management


##15.1. Determine the Status of the Last Command
ping localhost
$lastExitCode
$?


##15.2. View the Errors Generated by a Command
#The PowerShell $error variable always holds the list of errors generated so far in the current shell session. This list includes both terminating and nonterminating errors.
1/0
$Error[0] | Format-List -Force


Get-ChildItem IDoNotExist
$errorView = "CategoryView"
Get-ChildItem IDoNotExist


##15.3. Manage the Error Output of Commands
$error
$error[0]

$currentError = $error[0]
$currentError | Format-List -Force
$currentError.InvocationInfo


##15.4. Program: Resolve an Error
.\Resolve-Error.ps1 $Error[0]


##15.5. Configure Debug, Verbose, and Progress Output
#To configure the debug, verbose, and progress output of a script or cmdlet, modify the
#$debugPreference, $verbosePreference, and $progressPreference shell variables.

$debugPreference = "Continue"
Start-DebugCommand

Copy-Item c:\temp\*.txt c:\temp\backup\ -Verbose

#To disable progress output from a script or cmdlet that generates it:
$progressPreference = "SilentlyContinue"
Get-Progress.ps1


##15.6. Handle Warnings, Errors, and Terminating Errors
$warningPreference = "SilentlyContinue"
$errorActionPreference = "SilentlyContinue"

try
{
	1 / $null
}
catch [DivideByZeroException]
{
	"Don't divide by zero: $_"
}
finally
{
	"Script that will be executed even if errors occur in the try statement"
}


$warningPreference = "Continue"
./Get-WarningsAndErrors.ps1
$warningPreference = "SilentlyContinue"
./Get-WarningsAndErrors.ps1
$errorActionPreference = "SilentlyContinue"
./Get-WarningsAndErrors.ps1

$errorActionPreference = "Continue"
./Get-WarningsAndErrors.ps1

Get-ChildItem IDoNotExist -ErrorAction SilentlyContinue

$errorActionPreference = "Continue"
try { ./Get-WarningsAndErrors.ps1 } catch { "Caught an error" }

$errorActionPreference = "SilentlyContinue"
try { ./Get-WarningsAndErrors.ps1 } catch { "Caught an error" }


##15.7. Output Warnings, Errors, and Terminating Errors
#To write warnings and errors, use the Write-Warning and Write-Error cmdlets, re©\
#spectively. Use the throw statement to generate a terminating error.


##15.8. Program: Analyze a Script¡¯s Performance Profile

