/* Generated By:JavaCC: Do not edit this line. BaratParser.java */
package barat.parser;

import barat.collections.QualifiedNameList;
import barat.collections.QualifiedNameIterator;
import barat.collections.QualifiedNameArrayList;
import barat.collections.FieldList;
import barat.collections.ParameterList;
import barat.*;
import barat.reflect.*;
import barat.reflect.Class;
import java.util.*;
import java.util.Stack;


public class BaratParser implements BaratParserConstants {

  private static Factory factory() {
    return Factory.getInstance();
  }

  static Scope   currentScope = null;

  /**
   *  Defined here because as of JDK 1.1.3, 
   *  java.lang.Long.parseLong is buggy.
   */
  private static long parseLong (String data, int radix) {
    long result = 0;
    char[] ch = data.toCharArray();
    int  length = ch.length;
    for (int i=0; i < length; i++)
      result = radix * result + Character.digit (ch[i], radix);
    return result;
  }

  /**
   *  Defined here because as of JDK 1.1.3, 
   *  java.lang.Integer.parseInt is buggy.
   */
  private static int parseInt (String data, int radix) {
    int result = 0;
    char[] ch = data.toCharArray();
    int  length = ch.length;
    for (int i=0; i < length; i++)
      result = radix * result + Character.digit (ch[i], radix);
    return result;
  }

  private static int chars_consumed;
  /**
   * Parse character literals. TODO: unicodes, etc.
   */
  private static final char parseChar(String data) {
    char[] chars = data.toCharArray();
    if(chars[0] != '\\') {
      chars_consumed = 0;
      return chars[0];
    }

    int i;
    for(i=1; (i < chars.length) && Character.isDigit(chars[i]); i++);

    if(i > 1) {
      chars_consumed = i;
      return (char)Integer.parseInt(new String(chars, 1, i-1), 8);
    }

    chars_consumed = 2;

    switch(chars[1]) {
    case 'n'  : return '\n';
    case 'r'  : return '\r';
    case 't'  : return '\t';
    case 'f'  : return '\f';
    case 'b'  : return '\b';
    case '\\' : return '\\';
    default: return (char)chars[1]; // TODO
    }
  }

  /**
   * Replace \n and the like in strings
   */
  private static final String parseString(String str) {
    int          index, old_index;
    StringBuffer buf = new StringBuffer();

    try {
      if((index = str.indexOf('\\')) != -1) { // `\' found in str
        old_index = 0;                        // String start offset

        // While we have something to replace
        while((index = str.indexOf('\\', old_index)) != -1) {
          buf.append(str.substring(old_index, index)); // append prefix
          buf.append(parseChar(str.substring(index)));
          old_index = index + chars_consumed;
        }

        buf.append(str.substring(old_index)); // append rest of string
        str = buf.toString();
      }
    } catch(StringIndexOutOfBoundsException e) { // Should not occur
      System.err.println(e);
    }

    return str;
  }

  // Semantic lookahead rules follow.

  // implements:  LOOKAHEAD( ( "abstract" | "final" | "public" | "strictfp")* "class" )
  static boolean isClassDeclaration() {
    int curTok = 1;
    Token tok;
    while (true) {
      tok = getToken(curTok);
      switch (tok.kind) {
      case ABSTRACT:
      case FINAL:
      case PUBLIC:
      case STRICTFP:
        curTok++;
        break;
      case CLASS:
        return true;
      default:
        return false;
      }
    }
  }

  // implements:  LOOKAHEAD(2)  for Initializer()
  static boolean isInitializer() {
    Token tok = getToken(1);
    if (tok.kind == LBRACE) return true;
    if (tok.kind == STATIC) {
      tok = getToken(2);
      if (tok.kind == LBRACE) return true;
    }
    return false;
  }

  // implements:  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | "protected" | "private" | "strictfp" )* "class" )
  static boolean isNestedClassDeclaration() {
    int curTok = 1;
    Token tok;
    while (true) {
      tok = getToken(curTok);
      switch (tok.kind) {
      case STATIC:
      case ABSTRACT:
      case FINAL:
      case PUBLIC:
      case PROTECTED:
      case PRIVATE:
      case STRICTFP:
        curTok++;
        break;
      case CLASS:
        return true;
      default:
        return false;
      }
    }
  }

  // implements:  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | "protected" | "private" | "strictfp" )* "interface" )
  static boolean isNestedInterfaceDeclaration() {
    int curTok = 1;
    Token tok;
    while (true) {
      tok = getToken(curTok);
      switch (tok.kind) {
      case STATIC:
      case ABSTRACT:
      case FINAL:
      case PUBLIC:
      case PROTECTED:
      case PRIVATE:
      case STRICTFP:
        curTok++;
        break;
      case INTERFACE:
        return true;
      default:
        return false;
      }
    }
  }

  // implements:  LOOKAHEAD( [ "public" | "protected" | "private" | "strictfp" ] Name() "(" )
  static boolean isConstructorDeclaration() {
    int curTok = 1;
    Token tok;
    tok = getToken(1);
    switch (tok.kind) {
    case PUBLIC:
    case PROTECTED:
    case PRIVATE:
    case STRICTFP:
      curTok = 2;
    }
    tok = getToken(curTok++);
    if (tok.kind != IDENTIFIER) return false;
    while (true) {
      tok = getToken(curTok++);
      if (tok.kind == LPAREN) return true;
      if (tok.kind != DOT) return false;
      tok = getToken(curTok++);
      if (tok.kind != IDENTIFIER) return false;
    }
  }

  // Returns true if the next set of tokens cannot be a field declaration.
  // Returns false if the next set of tokens cannot be a method declaration.
  // Note how this method is used in the grammar.  We don't have to do a
  // comprehensive check like we have done in the lookahead methods above.
  // This show (therefore) another way you can implement lookahead methods.
  // The way we do it is to see if we can find a "(" before either a "=" or
  // a ";", in which case we return true.
  static boolean isMethodDeclaration() {
    int curTok = 1;
    Token tok;
    while (true) {
      tok = getToken(curTok++);
      switch (tok.kind) {
      case LPAREN:
        return true;
      case ASSIGN:
      case SEMICOLON:
      case EOF:
        return false;
      }
    }
  }

  // Checks that there is a "," and then there is no "}" following that.
  static boolean moreVariableInitializers() {
    return getToken(1).kind == COMMA && getToken(2).kind != RBRACE;
  }

  // Checks that this is a constructor invocation as opposed to a block
  // statement.
  static boolean isConstructorInvocation() {
    int curTok = 1;
    Token tok = getToken(1);
    switch (tok.kind) {
    case THIS:
    case SUPER:
      // We are assuming here that if the statement starts with "this"
      // or "super", and the next token is "(", then it has to be a
      // constructor invocation.
      return getToken(2).kind == LPAREN;
    case STRING_LITERAL:
    case LPAREN:
    case NEW:
    case IDENTIFIER:
      // Now move across tokens until the end of the statement - the
      // first semicolon not nested within any kind of parentheses.
      // If a "super(" is matched also not nested and before this
      // semicolon, we return true.  Otherwise return false.
      int nestingLevel = 0;
      while (true) {
        tok = getToken(curTok++);
        switch (tok.kind) {
        case SEMICOLON:
          if (nestingLevel == 0) {
            return false;
          }
          break;
        case SUPER:
          if (nestingLevel == 0) {
            return getToken(curTok).kind == LPAREN;
          }
          break;
        case LPAREN:
        case LBRACE:
        case LBRACKET:
          nestingLevel++;
          break;
        case RPAREN:
        case RBRACE:
        case RBRACKET:
          nestingLevel--;
          break;
        case EOF:
          return false;
        }
      }
    default:
      return false;
    }
  }

  // Returns true if this is a primitive type (or an array of primitive
  // type) cast.
  static boolean isPrimitiveTypeCast() {
    if (getToken(1).kind != LPAREN) return false;
    Token tok = getToken(2);
    switch (tok.kind) {
    case BOOLEAN:
    case CHAR:
    case BYTE:
    case SHORT:
    case INT:
    case LONG:
    case FLOAT:
    case DOUBLE:
      return true;
    }
    return false;
  }

  // Returns true if this is a type cast.
  static boolean isTypeCast() {
    if (isPrimitiveTypeCast()) return true;
    if (getToken(1).kind != LPAREN) return false;
    int curTok = 2;
    Token tok = getToken(curTok++);
    if (tok.kind != IDENTIFIER) return false;
    while (true) {
      tok = getToken(curTok++);
      if (tok.kind != DOT) break;
      tok = getToken(curTok++);
      if (tok.kind != IDENTIFIER) return false;
    }
    if (tok.kind == RPAREN) {
      tok = getToken(curTok);
      switch (tok.kind) {
      case TILDE:
      case BANG:
      case LPAREN:
      case IDENTIFIER:
      case THIS:
      case SUPER:
      case NEW:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case TRUE:
      case FALSE:
      case NULL:
        return true;
      }
      return false;
    } else {
      if (tok.kind != LBRACKET) return false;
      tok = getToken(curTok);
      if (tok.kind != RBRACKET) return false;
      return true;
    }
  }

  // Distinguishes between ClassSelector and Name.
  static boolean isClassSelector() {
    int curTok = 1;
    Token tok = getToken(curTok++);
    if (tok.kind != IDENTIFIER) return true;
    while (true) {
      tok = getToken(curTok++);
      while (tok.kind == LBRACKET) {
        // A simple loop to accept "[]"s.  We are a little sloppy
        // in that we don't require it to be at the end, but then
        // this is only a lookahead check.
        tok = getToken(curTok++);
        if (tok.kind != RBRACKET) return false;
        tok = getToken(curTok++);
      }
      if (tok.kind != DOT) return false;
      tok = getToken(curTok++);
      if (tok.kind == CLASS) return true;
      if (tok.kind != IDENTIFIER) return false;
    }
  }

  // implements:  LOOKAHEAD([ "final" ] Type() <IDENTIFIER>)
  static boolean isLocalVariableDeclaration() {
    int curTok = 1;
    Token tok = getToken(curTok++);
    if (tok.kind == FINAL) tok = getToken(curTok++);
    switch (tok.kind) {
    case BOOLEAN:
    case CHAR:
    case BYTE:
    case SHORT:
    case INT:
    case LONG:
    case FLOAT:
    case DOUBLE:
      tok = getToken(curTok++);
      break;
    case IDENTIFIER:
      while (true) {
        tok = getToken(curTok++);
        if (tok.kind != DOT) break;
        tok = getToken(curTok++);
        if (tok.kind != IDENTIFIER) return false;
      }
      break;
    default:
      return false;
    }
    while (tok.kind == LBRACKET) {
      tok = getToken(curTok++);
      if (tok.kind != RBRACKET) return false;
      tok = getToken(curTok++);
    }
    return tok.kind == IDENTIFIER;
  }

  static boolean isPrimarySuffix() {
    Token tok = getToken(1);
    if (tok.kind == LPAREN || tok.kind == LBRACKET) return true;
    if (tok.kind == DOT) {
      tok = getToken(2);
      switch (tok.kind) {
      case THIS:
      case SUPER:
      case NEW:
      case IDENTIFIER:
        return true;
      }
    }
    return false;
  }

/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */
  static final public CompilationUnitImpl CompilationUnit(String filename) throws ParseException {
  CompilationUnitImpl unit = null;
  PackageImpl         pkg  = null;
  List<QualifiedName> classImports = new ArrayList<QualifiedName>();
  List<barat.reflect.Package>       packageImports = new ArrayList<barat.reflect.Package>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PACKAGE:
      pkg = PackageDeclaration();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    if (pkg == null)
    {
      pkg = factory().getPackage (""); // the default package
    }
    packageImports.add(pkg);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPORT:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      ImportDeclaration(classImports, packageImports);
    }
    unit = factory().createCompilationUnit(filename, classImports, packageImports);
    unit.setEnclosingScope (pkg);
    unit.setupContainment(pkg, "compilationUnit");
    currentScope = unit;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case CLASS:
      case FINAL:
      case INTERFACE:
      case PUBLIC:
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      TypeDeclaration(unit);
    }
    jj_consume_token(0);
    {if (true) return unit;}
    throw new Error("Missing return statement in function");
  }

  static final public PackageImpl PackageDeclaration() throws ParseException {
  QualifiedName name;
    jj_consume_token(PACKAGE);
    name = Name(new Token[1]);
    jj_consume_token(SEMICOLON);
    {if (true) return factory().getPackage (name.toString());}
    throw new Error("Missing return statement in function");
  }

  static final public void ImportDeclaration(List<QualifiedName> classImports, List<barat.reflect.Package> packageImports) throws ParseException {
  QualifiedName name;
  boolean isPackageImport = false;
    jj_consume_token(IMPORT);
    name = Name(new Token[1]);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      jj_consume_token(STAR);
                                                 isPackageImport = true;
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    if (isPackageImport) {
      packageImports.add(factory().getPackage(name.toString()));
    } else if(name.toString().indexOf('.') > 0) { // Otherwise from default package -> ignore
      classImports.add(name);
    } else {
      ToBe.fixedLater("we should not ignore this because explicit imports from default package do matter");
      // details: such an import takes precedence over a package import which might have a class
      // of the same name.
    }
  }

  static final public void TypeDeclaration(CompilationUnitImpl compilationUnit) throws ParseException {
    if (isClassDeclaration()) {
      ClassDeclaration(compilationUnit);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case INTERFACE:
      case PUBLIC:
      case STRICTFP:
        InterfaceDeclaration(compilationUnit);
        break;
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/*
 * Declaration syntax follows.
 */
  static final public void ClassDeclaration(CompilationUnitImpl compilationUnit) throws ParseException {
  Modifiers modifiers = new Modifiers();
  Token t = null;
  Token startToken = null;
    modifiers = factory().createModifiers();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case FINAL:
      case PUBLIC:
      case STRICTFP:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
        t = jj_consume_token(ABSTRACT);
                       if(startToken==null) startToken=t; modifiers.isAbstract(true);
        break;
      case FINAL:
        t = jj_consume_token(FINAL);
                       if(startToken==null) startToken=t; modifiers.isFinal(true);
        break;
      case PUBLIC:
        t = jj_consume_token(PUBLIC);
                       if(startToken==null) startToken=t; modifiers.isPublic(true);
        break;
      case STRICTFP:
        t = jj_consume_token(STRICTFP);
                       if(startToken==null) startToken=t; modifiers.isStrictfp(true);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    UnmodifiedClassDeclaration(compilationUnit, modifiers, startToken);
  }

  static final public void UnmodifiedClassDeclaration(NodeImpl      container,
                                 Modifiers modifiers, Token startToken) throws ParseException {
  ClassImpl c = null;
  Scope  enclosingScope = currentScope;
  Token  t              = null;
  Token  name           = null;
  String className      = null;
  QualifiedName     superClassName = QualifiedName.from("java.lang.Object");
  QualifiedNameList interfaceNames = null;
    t = jj_consume_token(CLASS);
              if(startToken==null) startToken=t;
    name = jj_consume_token(IDENTIFIER);
    className   = name.toString();

    c = factory().createClass(className, container);
    c.line_number(name.beginLine);

    token_source.setTagsFor(c, name.endLine, currentScope);
    token_source.new_setTagsFor(c, startToken);
    c.setDelegate_modifiers (modifiers);
    c.setEnclosingScope (currentScope);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      superClassName = Name(new Token[1]);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    c.setSuperclass (NameAnalysis.createClassAttribute
                                      (superClassName, currentScope));
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPLEMENTS:
      jj_consume_token(IMPLEMENTS);
      interfaceNames = NameList();
        for(QualifiedNameIterator qi = interfaceNames.iterator();
            qi.hasNext(); )
          c.addImplementedInterface (NameAnalysis.createInterfaceAttribute
                                        (qi.next(), currentScope));
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    currentScope = c;
    ClassBody(c);
    currentScope = enclosingScope;
  }

  static final public void ClassBody(ClassImpl c) throws ParseException {
    jj_consume_token(LBRACE);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOID:
      case VOLATILE:
      case STRICTFP:
      case IDENTIFIER:
      case LBRACE:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      ClassBodyDeclaration(c);
    }
    jj_consume_token(RBRACE);
    if (c.getConstructors().size() == 0) {
      // add implicit default constructor
      ConstructorImpl constructor = factory().createConstructor();
      c.addConstructor (constructor);
      constructor.setEnclosingScope (currentScope);
      constructor.setDelegate_modifiers(factory().createModifiers());
      if (c.isPublic()) constructor.isPublic (true);
      ConstructorCallImpl call = NameAnalysis.createConstructorCall
        (constructor, null, true, new ArrayList<Attribute<AExpression>>());
      constructor.setConstructorCall (call);
      BlockImpl block = factory().createBlock();
      block.setEnclosingScope(constructor);
      constructor.setBody (block);
    }
  }

  static final public void NestedClassDeclaration(AUserTypeImpl outerType) throws ParseException {
  Modifiers modifiers = new Modifiers();
  Token t = null;
  Token startToken = null;
    modifiers = factory().createModifiers();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case FINAL:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case STRICTFP:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC:
        jj_consume_token(STATIC);
                    if(startToken==null) startToken=t; modifiers.isStatic(true);
        break;
      case ABSTRACT:
        jj_consume_token(ABSTRACT);
                    if(startToken==null) startToken=t; modifiers.isAbstract(true);
        break;
      case FINAL:
        jj_consume_token(FINAL);
                    if(startToken==null) startToken=t; modifiers.isFinal(true);
        break;
      case PUBLIC:
        jj_consume_token(PUBLIC);
                    if(startToken==null) startToken=t; modifiers.isPublic(true);
        break;
      case PROTECTED:
        jj_consume_token(PROTECTED);
                    if(startToken==null) startToken=t; modifiers.isProtected(true);
        break;
      case PRIVATE:
        jj_consume_token(PRIVATE);
                    if(startToken==null) startToken=t; modifiers.isPrivate(true);
        break;
      case STRICTFP:
        jj_consume_token(STRICTFP);
                    if(startToken==null) startToken=t; modifiers.isStrictfp(true);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    UnmodifiedClassDeclaration(outerType, modifiers, startToken);
  }

  static final public void ClassBodyDeclaration(ClassImpl c) throws ParseException {
    if (isInitializer()) {
      Initializer(c);
    } else if (isNestedClassDeclaration()) {
      NestedClassDeclaration(c);
    } else if (isNestedInterfaceDeclaration()) {
      NestedInterfaceDeclaration(c);
    } else if (isConstructorDeclaration()) {
      ConstructorDeclaration(c);
    } else if (isMethodDeclaration()) {
      MethodDeclaration(c);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case TRANSIENT:
      case VOLATILE:
      case IDENTIFIER:
        FieldDeclaration(c);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
  }

  static final public void InterfaceDeclaration(CompilationUnitImpl compilationUnit) throws ParseException {
  Modifiers modifiers = new Modifiers();
  Token startToken = null;
  Token t = null;
    modifiers = factory().createModifiers();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case PUBLIC:
      case STRICTFP:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
        t = jj_consume_token(ABSTRACT);
                     if(startToken==null) startToken=t; modifiers.isAbstract(true);
        break;
      case PUBLIC:
        t = jj_consume_token(PUBLIC);
                     if(startToken==null) startToken=t; modifiers.isPublic(true);
        break;
      case STRICTFP:
        t = jj_consume_token(STRICTFP);
                     if(startToken==null) startToken=t; modifiers.isStrictfp(true);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    UnmodifiedInterfaceDeclaration(compilationUnit, modifiers, startToken);
  }

  static final public void NestedInterfaceDeclaration(AUserTypeImpl outerType) throws ParseException {
  Modifiers modifiers = new Modifiers();
  Token startToken = null;
  Token t = null;
    modifiers = factory().createModifiers();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case FINAL:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case STRICTFP:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC:
        t = jj_consume_token(STATIC);
                      if(startToken==null) startToken=t; modifiers.isStatic(true);
        break;
      case ABSTRACT:
        t = jj_consume_token(ABSTRACT);
                      if(startToken==null) startToken=t; modifiers.isAbstract(true);
        break;
      case FINAL:
        t = jj_consume_token(FINAL);
                      if(startToken==null) startToken=t; modifiers.isFinal(true);
        break;
      case PUBLIC:
        t = jj_consume_token(PUBLIC);
                      if(startToken==null) startToken=t; modifiers.isPublic(true);
        break;
      case PROTECTED:
        t = jj_consume_token(PROTECTED);
                      if(startToken==null) startToken=t; modifiers.isProtected(true);
        break;
      case PRIVATE:
        t = jj_consume_token(PRIVATE);
                      if(startToken==null) startToken=t; modifiers.isPrivate(true);
        break;
      case STRICTFP:
        t = jj_consume_token(STRICTFP);
                      if(startToken==null) startToken=t; modifiers.isStrictfp(true);
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    UnmodifiedInterfaceDeclaration(outerType, modifiers, startToken);
  }

  static final public void UnmodifiedInterfaceDeclaration(NodeImpl      container,
                                     Modifiers modifiers, Token startToken) throws ParseException {
  InterfaceImpl i = null;
  Scope  enclosingScope     = currentScope;
  Token  t                  = null;
  Token  name               = null;
  String interfaceName      = null;
  QualifiedNameList superInterfaceNames = new QualifiedNameArrayList();
    t = jj_consume_token(INTERFACE);
                  if(startToken==null) startToken=t;
    name = jj_consume_token(IDENTIFIER);
    interfaceName = name.toString();

    i = factory().createInterface(interfaceName, container);
    i.line_number(name.beginLine);

    token_source.setTagsFor(i, name.endLine, currentScope);
    token_source.new_setTagsFor(i, startToken);
    i.setDelegate_modifiers (modifiers);
    i.setEnclosingScope (currentScope);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      superInterfaceNames = NameList();
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    for(QualifiedNameIterator qi = superInterfaceNames.iterator();
        qi.hasNext(); )
    i.addExtendedInterface (NameAnalysis.createInterfaceAttribute
                            (qi.next(), currentScope));
    jj_consume_token(LBRACE);
      currentScope = i;
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOID:
      case VOLATILE:
      case STRICTFP:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_8;
      }
      InterfaceMemberDeclaration(i);
    }
    jj_consume_token(RBRACE);
    currentScope = enclosingScope;
  }

  static final public void InterfaceMemberDeclaration(InterfaceImpl i) throws ParseException {
    if (isNestedClassDeclaration()) {
      NestedClassDeclaration(i);
    } else if (isNestedInterfaceDeclaration()) {
      NestedInterfaceDeclaration(i);
    } else if (isMethodDeclaration()) {
      MethodDeclaration(i);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case TRANSIENT:
      case VOLATILE:
      case IDENTIFIER:
        FieldDeclaration(i);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
  }

  static final public void FieldDeclaration(AUserTypeImpl outerType) throws ParseException {
  Modifiers modifiers = new Modifiers();
  Token t = null;
  Token startToken = null;
  Token[] tHolder = new Token[1];
  Attribute<AType>     type;
  NodeImpl      item;
  FieldList               result;
    modifiers = factory().createModifiers();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINAL:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case TRANSIENT:
      case VOLATILE:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        t = jj_consume_token(PUBLIC);
                       if(startToken==null) startToken=t; modifiers.isPublic(true);
        break;
      case PROTECTED:
        t = jj_consume_token(PROTECTED);
                       if(startToken==null) startToken=t; modifiers.isProtected(true);
        break;
      case PRIVATE:
        t = jj_consume_token(PRIVATE);
                       if(startToken==null) startToken=t; modifiers.isPrivate(true);
        break;
      case STATIC:
        t = jj_consume_token(STATIC);
                       if(startToken==null) startToken=t; modifiers.isStatic(true);
        break;
      case FINAL:
        t = jj_consume_token(FINAL);
                       if(startToken==null) startToken=t; modifiers.isFinal(true);
        break;
      case TRANSIENT:
        t = jj_consume_token(TRANSIENT);
                       if(startToken==null) startToken=t; modifiers.isTransient(true);
        break;
      case VOLATILE:
        t = jj_consume_token(VOLATILE);
                       if(startToken==null) startToken=t; modifiers.isVolatile(true);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    type = Type(tHolder);
                         if(startToken==null) startToken=tHolder[0];
    item = VariableDeclarator(type, false, startToken);
    ((FieldImpl)item).setDelegate_modifiers (modifiers);
    outerType.addField (((FieldImpl)item));
    if(outerType instanceof Interface)
    {
      modifiers.isPublic(true);
      modifiers.isStatic(true);
      modifiers.isFinal(true);
    }
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_10;
      }
      jj_consume_token(COMMA);
      item = VariableDeclarator(type, false, startToken);
          ((FieldImpl)item).setDelegate_modifiers (modifiers);
          outerType.addField (((FieldImpl)item));
    }
    jj_consume_token(SEMICOLON);
  }

  static final public NodeImpl VariableDeclarator(Attribute<AType> type,
                                       boolean          isVariable, Token startToken) throws ParseException {
  String id;
  Attribute<AExpression> initializer;
  int lineHolder[] = new int[1];
  FieldImpl field = null;
  LocalVariableImpl v = null;
    id = VariableDeclaratorId(lineHolder);
    while (id.endsWith ("[]")) {
      id        = id.substring (0, id.length()-2);
      type      = NameAnalysis.createArrayAttribute(type);
    }
    if (!isVariable) {
      field = factory().createField();
      field.setType (type);
      field.setName (id);
      field.line_number(lineHolder[0]);
      token_source.setTagsFor(field, lineHolder[0], currentScope);
      token_source.new_setTagsFor(field, startToken);
    } else {
      v = factory().createLocalVariable();
      v.setType (type);
      v.setName (id);
      v.line_number(lineHolder[0]);
      token_source.setTagsFor(v, lineHolder[0], currentScope);
      token_source.new_setTagsFor(v, startToken);
    }
    initializer = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      initializer = VariableInitializer(true);
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    if (!isVariable) {
      if (initializer != null)
      {
        field.setInitializer (initializer);
      }
      {if (true) return field;}
    } else {
      if (initializer != null)
      {
        v.setInitializer (initializer);
      }
      {if (true) return v;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public String VariableDeclaratorId(int[] lineHolder) throws ParseException {
  Token t;
  String result;
    t = jj_consume_token(IDENTIFIER);
    lineHolder[0] = t.endLine; result = t.image;
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_11;
      }
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
              result = result + "[]";
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public Attribute<AExpression> VariableInitializer(boolean wrapArrayInitializer) throws ParseException {
  Attribute<AExpression> result;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      result = ArrayInitializer();
    if(wrapArrayInitializer) result = factory().wrapArrayInitializer(result);
    {if (true) return result;}
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      result = Expression();
                                 {if (true) return result;}
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Attribute<AExpression> ArrayInitializer() throws ParseException {
  ArrayInitializerImpl result;
  Attribute<AExpression>     item;
    jj_consume_token(LBRACE);
      result = factory().createArrayInitializer();
      result.line_number(token.beginLine);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      item = VariableInitializer(false);
        result.addArgument (item);
      label_12:
      while (true) {
        if (getToken(1).kind == COMMA && getToken(2).kind != RBRACE) {
          ;
        } else {
          break label_12;
        }
        jj_consume_token(COMMA);
        item = VariableInitializer(false);
              result.addArgument (item);
      }
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
    {if (true) return new Constant<AExpression> (result);}
    throw new Error("Missing return statement in function");
  }

  static final public void MethodDeclaration(AUserTypeImpl outerType) throws ParseException {
  AMethodImpl   m;
  Modifiers modifiers = new Modifiers();
  Token t = null;
  Token startToken = null;
  Token[] tHolder = new Token[1];
  Attribute<AType>        resultType;
  Scope                   enclosingScope = currentScope;
  String                  name;
  ParameterList           parameters;
  QualifiedNameList       exceptionNames;
  BlockImpl               body;
    modifiers      = factory().createModifiers();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case FINAL:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case SYNCHRONIZED:
      case STRICTFP:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        t = jj_consume_token(PUBLIC);
                         if(startToken==null) startToken=t; modifiers.isPublic(true);
        break;
      case PROTECTED:
        t = jj_consume_token(PROTECTED);
                         if(startToken==null) startToken=t; modifiers.isProtected(true);
        break;
      case PRIVATE:
        t = jj_consume_token(PRIVATE);
                         if(startToken==null) startToken=t; modifiers.isPrivate(true);
        break;
      case STATIC:
        t = jj_consume_token(STATIC);
                         if(startToken==null) startToken=t; modifiers.isStatic(true);
        break;
      case ABSTRACT:
        t = jj_consume_token(ABSTRACT);
                         if(startToken==null) startToken=t; modifiers.isAbstract(true);
        break;
      case FINAL:
        t = jj_consume_token(FINAL);
                         if(startToken==null) startToken=t; modifiers.isFinal(true);
        break;
      case NATIVE:
        t = jj_consume_token(NATIVE);
                         if(startToken==null) startToken=t; modifiers.isNative(true);
        break;
      case SYNCHRONIZED:
        t = jj_consume_token(SYNCHRONIZED);
                         if(startToken==null) startToken=t; modifiers.isSynchronized(true);
        break;
      case STRICTFP:
        t = jj_consume_token(STRICTFP);
                         if(startToken==null) startToken=t; modifiers.isStrictfp(true);
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    resultType = ResultType(tHolder);
    if(startToken==null) startToken=tHolder[0];
    if (   (outerType instanceof InterfaceImpl)
        || modifiers.isAbstract() || modifiers.isNative()) {
      if(outerType instanceof InterfaceImpl)
      {
        modifiers.isPublic(true);
        modifiers.isAbstract(true);
      }
      m = factory().createAbstractMethod();
      m.setDelegate_modifiers (modifiers);
      token_source.new_setTagsFor(m, startToken);
      if (resultType != null) m.setResultType (resultType);
      m.setEnclosingScope (outerType);
    } else {
      m = factory().createConcreteMethod();
      m.setDelegate_modifiers (modifiers);
      token_source.new_setTagsFor(m, startToken);
      if (resultType != null) m.setResultType (resultType);
      m.setEnclosingScope (outerType);
    }
    MethodDeclarator(m, resultType);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THROWS:
      jj_consume_token(THROWS);
      exceptionNames = NameList();
        for(QualifiedNameIterator qi = exceptionNames.iterator();
            qi.hasNext(); )
          m.addException (NameAnalysis.createClassAttribute
                                        (qi.next(), currentScope));
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
    currentScope = m;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      body = Block();
        ((ConcreteMethodImpl)m).setBody (body);
        ((ClassImpl)outerType).addConcreteMethod ((ConcreteMethodImpl)m);
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
        outerType.addAbstractMethod ((AbstractMethodImpl)m);
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    currentScope = enclosingScope;
  }

  static final public void MethodDeclarator(AMethodImpl m,
                       Attribute<AType> resultType) throws ParseException {
  Token t;
    t = jj_consume_token(IDENTIFIER);
    m.setName (t.image); token_source.setTagsFor(m, t.endLine, currentScope); m.line_number(t.beginLine);
    FormalParameters(m);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[34] = jj_gen;
        break label_14;
      }
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
      m.setResultType (NameAnalysis.createArrayAttribute(resultType));
    }
  }

  static final public void FormalParameters(AMethodImpl m) throws ParseException {
  ParameterImpl p;
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FINAL:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case IDENTIFIER:
      p = FormalParameter();
          m.addParameter (p);
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[35] = jj_gen;
          break label_15;
        }
        jj_consume_token(COMMA);
        p = FormalParameter();
                m.addParameter (p);
      }
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
  }

  static final public ParameterImpl FormalParameter() throws ParseException {
  Attribute<AType> type;
  String id;
  Token t = null;
  Token startToken = null;
  Token[] tHolder = new Token[1];
  int lineHolder[] = new int[1];
  boolean is_final = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINAL:
      t = jj_consume_token(FINAL);
                startToken = t; is_final = true;
      break;
    default:
      jj_la1[37] = jj_gen;
      ;
    }
    type = Type(tHolder);
                         if(startToken==null) startToken=tHolder[0];
    id = VariableDeclaratorId(lineHolder);
    while (id.endsWith ("[]")) {
      type = NameAnalysis.createArrayAttribute(type);
      id   = id.substring (0, id.length()-2);
    }
    ParameterImpl result = factory().createParameter (type, id);
    token_source.setTagsFor(result, lineHolder[0], currentScope);
    result.line_number(lineHolder[0]);
    result.isFinal(is_final);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public void ConstructorDeclaration(ClassImpl c) throws ParseException {
  Modifiers   modifiers = new Modifiers();
  ConstructorImpl constructor;
  BlockImpl       body;
  Scope           enclosingScope = currentScope;
  Token t = null;
  Token startToken = null;
  QualifiedNameList exceptionNames;
    modifiers = factory().createModifiers();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case STRICTFP:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        t = jj_consume_token(PUBLIC);
                      if(startToken==null) startToken = t; modifiers.isPublic(true);
        break;
      case PROTECTED:
        t = jj_consume_token(PROTECTED);
                      if(startToken==null) startToken = t; modifiers.isProtected(true);
        break;
      case PRIVATE:
        t = jj_consume_token(PRIVATE);
                      if(startToken==null) startToken = t; modifiers.isPrivate(true);
        break;
      case STRICTFP:
        t = jj_consume_token(STRICTFP);
                      if(startToken==null) startToken = t; modifiers.isStrictfp(true);
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[39] = jj_gen;
      ;
    }
    t = jj_consume_token(IDENTIFIER);
    if(startToken==null) startToken = t;
    constructor = factory().createConstructor();
    constructor.setDelegate_modifiers (modifiers);
    constructor.setName ("<init>");
    token_source.setTagsFor(constructor, t.beginLine, currentScope);
    token_source.new_setTagsFor(constructor, startToken);
    constructor.line_number(t.beginLine);
    constructor.setEnclosingScope (c);
    c.addConstructor (constructor);
    FormalParameters(constructor);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THROWS:
      jj_consume_token(THROWS);
      exceptionNames = NameList();
        for(QualifiedNameIterator qi = exceptionNames.iterator();
            qi.hasNext(); )
          constructor.addException (NameAnalysis.createClassAttribute
                                        (qi.next(), currentScope));
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
    jj_consume_token(LBRACE);
    body         = factory().createBlock();
    body.setEnclosingScope(constructor);
    body.line_number(token.beginLine);
    currentScope = body;
    if (isConstructorInvocation()) {
      ExplicitConstructorInvocation(constructor);
    } else {
      ;
    }
      if (constructor.getConstructorCall() == null) {
        // add default invocation of super class constructor
        ConstructorCallImpl call = NameAnalysis.createConstructorCall
          (constructor, null, true, new ArrayList<Attribute<AExpression>>());
        constructor.setConstructorCall (call);
      }
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CLASS:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case RETURN:
      case SHORT:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRUE:
      case TRY:
      case VOID:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case INCR:
      case DECR:
        ;
        break;
      default:
        jj_la1[41] = jj_gen;
        break label_16;
      }
      BlockStatement(body);
    }
    jj_consume_token(RBRACE);
    constructor.setBody (body);
    currentScope = enclosingScope;
  }

  static final public void ExplicitConstructorInvocation(ConstructorImpl constructor) throws ParseException {
  Attribute<AExpression>       prefix = null;
  List<Attribute<AExpression>> arguments;
    if (getToken(1).kind == THIS && getToken(2).kind == LPAREN) {
      jj_consume_token(THIS);
      arguments = Arguments();
      jj_consume_token(SEMICOLON);
    constructor.setConstructorCall
      (NameAnalysis.createConstructorCall (currentScope, null, false,
                                           arguments));
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
        if (getToken(1).kind != SUPER || getToken(2).kind != LPAREN) {
          prefix = PrimaryExpression();
          jj_consume_token(DOT);
        } else {
          ;
        }
        jj_consume_token(SUPER);
        arguments = Arguments();
        jj_consume_token(SEMICOLON);
    constructor.setConstructorCall (
     (NameAnalysis.createConstructorCall (currentScope, prefix, true,
                                          arguments)));
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void Initializer(ClassImpl c) throws ParseException {
  BlockImpl block;
  boolean isStatic = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATIC:
      jj_consume_token(STATIC);
               isStatic = true;
      break;
    default:
      jj_la1[43] = jj_gen;
      ;
    }
    block = Block();
    if(isStatic)
    {
      c.addStaticInitializer (block);
    }
    else
    {
      c.addInstanceInitializer (block);
    }
  }

/*
 * Type, name and expression syntax follows.
 */
  static final public Attribute<AType> Type(Token[] tHolder) throws ParseException {
  QualifiedName name;
  ATypeImpl type;
  Attribute<AType>    result;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
      type = PrimitiveType(tHolder);
        result = NameAnalysis.asAttribute (type);
      break;
    case IDENTIFIER:
      name = Name(tHolder);
        result = NameAnalysis.createUserTypeAttribute (name, currentScope);
      break;
    default:
      jj_la1[44] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[45] = jj_gen;
        break label_17;
      }
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
      result = NameAnalysis.createArrayAttribute(result);
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public PrimitiveTypeImpl PrimitiveType(Token[] tHolder) throws ParseException {
 Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
      t = jj_consume_token(BOOLEAN);
                 tHolder[0]=t; {if (true) return factory().getBoolean();}
      break;
    case CHAR:
      t = jj_consume_token(CHAR);
                 tHolder[0]=t; {if (true) return factory().getChar();}
      break;
    case BYTE:
      t = jj_consume_token(BYTE);
                 tHolder[0]=t; {if (true) return factory().getByte();}
      break;
    case SHORT:
      t = jj_consume_token(SHORT);
                 tHolder[0]=t; {if (true) return factory().getShort();}
      break;
    case INT:
      t = jj_consume_token(INT);
                 tHolder[0]=t; {if (true) return factory().getInt();}
      break;
    case LONG:
      t = jj_consume_token(LONG);
                 tHolder[0]=t; {if (true) return factory().getLong();}
      break;
    case FLOAT:
      t = jj_consume_token(FLOAT);
                 tHolder[0]=t; {if (true) return factory().getFloat();}
      break;
    case DOUBLE:
      t = jj_consume_token(DOUBLE);
                 tHolder[0]=t; {if (true) return factory().getDouble();}
      break;
    default:
      jj_la1[46] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Attribute<AType> ResultType(Token[] tHolder) throws ParseException {
  Attribute<AType> type;
  Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
      t = jj_consume_token(VOID);
                    tHolder[0]=t; {if (true) return null;}
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case IDENTIFIER:
      type = Type(tHolder);
                         {if (true) return type;}
      break;
    default:
      jj_la1[47] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public QualifiedName Name(Token[] tHolder) throws ParseException {
  Token t;
  QualifiedName result;
    t = jj_consume_token(IDENTIFIER);
    tHolder[0] = t;
    result = QualifiedName.from (t.image);
    label_18:
    while (true) {
      if (getToken(1).kind == DOT && getToken(2).kind == IDENTIFIER) {
        ;
      } else {
        break label_18;
      }
      jj_consume_token(DOT);
      t = jj_consume_token(IDENTIFIER);
      result = new QualifiedName (t.image, result);
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public QualifiedNameList NameList() throws ParseException {
  QualifiedNameList result;
  QualifiedName     item;
    result = new QualifiedNameArrayList();
    item = Name(new Token[1]);
    result.add (item);
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[48] = jj_gen;
        break label_19;
      }
      jj_consume_token(COMMA);
      item = Name(new Token[1]);
          result.add (item);
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/*
 * Expression syntax follows.
 */
  static final public Attribute<AExpression> Expression() throws ParseException {
  Attribute<AExpression> result;
  Attribute<AExpression> rightOperand;
  String operator;
    result = ConditionalExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
    case PLUSASSIGN:
    case MINUSASSIGN:
    case STARASSIGN:
    case SLASHASSIGN:
    case ANDASSIGN:
    case ORASSIGN:
    case XORASSIGN:
    case REMASSIGN:
    case LSHIFTASSIGN:
    case RSIGNEDSHIFTASSIGN:
    case RUNSIGNEDSHIFTASSIGN:
      operator = AssignmentOperator();
      rightOperand = Expression();
      result = NameAnalysis.asAttribute
                 (factory().createAssignment (result, operator, rightOperand));
      break;
    default:
      jj_la1[49] = jj_gen;
      ;
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public String AssignmentOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
            {if (true) return "=";}
      break;
    case STARASSIGN:
      jj_consume_token(STARASSIGN);
            {if (true) return "*=";}
      break;
    case SLASHASSIGN:
      jj_consume_token(SLASHASSIGN);
            {if (true) return "/=";}
      break;
    case REMASSIGN:
      jj_consume_token(REMASSIGN);
            {if (true) return "%=";}
      break;
    case PLUSASSIGN:
      jj_consume_token(PLUSASSIGN);
            {if (true) return "+=";}
      break;
    case MINUSASSIGN:
      jj_consume_token(MINUSASSIGN);
            {if (true) return "-=";}
      break;
    case LSHIFTASSIGN:
      jj_consume_token(LSHIFTASSIGN);
            {if (true) return "<<=";}
      break;
    case RSIGNEDSHIFTASSIGN:
      jj_consume_token(RSIGNEDSHIFTASSIGN);
            {if (true) return ">>=";}
      break;
    case RUNSIGNEDSHIFTASSIGN:
      jj_consume_token(RUNSIGNEDSHIFTASSIGN);
            {if (true) return ">>>=";}
      break;
    case ANDASSIGN:
      jj_consume_token(ANDASSIGN);
            {if (true) return "&=";}
      break;
    case XORASSIGN:
      jj_consume_token(XORASSIGN);
            {if (true) return "^=";}
      break;
    case ORASSIGN:
      jj_consume_token(ORASSIGN);
            {if (true) return "|=";}
      break;
    default:
      jj_la1[50] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Attribute<AExpression> ConditionalExpression() throws ParseException {
  Attribute<AExpression> ifTrue;
  Attribute<AExpression> ifFalse;
  Attribute<AExpression> result;
    result = ConditionalOrExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HOOK:
      jj_consume_token(HOOK);
      ifTrue = Expression();
      jj_consume_token(COLON);
      ifFalse = ConditionalExpression();
      result = NameAnalysis.asAttribute
                 (factory().createConditional (result, ifTrue, ifFalse));
      break;
    default:
      jj_la1[51] = jj_gen;
      ;
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public Attribute<AExpression> ConditionalOrExpression() throws ParseException {
  Attribute<AExpression> rightOperand;
  Attribute<AExpression> result;
  String operator;
    result = ConditionalAndExpression();
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_OR:
        ;
        break;
      default:
        jj_la1[52] = jj_gen;
        break label_20;
      }
      jj_consume_token(SC_OR);
            operator = "||";
      rightOperand = ConditionalAndExpression();
      result = NameAnalysis.asAttribute
                 (factory().createBinaryOperation
                    (result, operator, rightOperand));
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public Attribute<AExpression> ConditionalAndExpression() throws ParseException {
  Attribute<AExpression> rightOperand;
  Attribute<AExpression> result;
  String operator;
    result = InclusiveOrExpression();
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_AND:
        ;
        break;
      default:
        jj_la1[53] = jj_gen;
        break label_21;
      }
      jj_consume_token(SC_AND);
            operator = "&&";
      rightOperand = InclusiveOrExpression();
      result = NameAnalysis.asAttribute
                 (factory().createBinaryOperation
                   (result, operator, rightOperand));
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public Attribute<AExpression> InclusiveOrExpression() throws ParseException {
  Attribute<AExpression> rightOperand;
  Attribute<AExpression> result;
  String operator;
    result = ExclusiveOrExpression();
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        jj_la1[54] = jj_gen;
        break label_22;
      }
      jj_consume_token(BIT_OR);
           operator = "|";
      rightOperand = ExclusiveOrExpression();
      result = NameAnalysis.asAttribute
                 (factory().createBinaryOperation
                   (result, operator, rightOperand));
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public Attribute<AExpression> ExclusiveOrExpression() throws ParseException {
  Attribute<AExpression> rightOperand;
  Attribute<AExpression> result;
  String operator;
    result = AndExpression();
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XOR:
        ;
        break;
      default:
        jj_la1[55] = jj_gen;
        break label_23;
      }
      jj_consume_token(XOR);
           operator = "^";
      rightOperand = AndExpression();
      result = NameAnalysis.asAttribute
                 (factory().createBinaryOperation
                   (result, operator, rightOperand));
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public Attribute<AExpression> AndExpression() throws ParseException {
  Attribute<AExpression> rightOperand;
  Attribute<AExpression> result;
  String operator;
    result = EqualityExpression();
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        ;
        break;
      default:
        jj_la1[56] = jj_gen;
        break label_24;
      }
      jj_consume_token(BIT_AND);
           operator = "&";
      rightOperand = EqualityExpression();
      result = NameAnalysis.asAttribute
                 (factory().createBinaryOperation
                   (result, operator, rightOperand));
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public Attribute<AExpression> EqualityExpression() throws ParseException {
  Attribute<AExpression> rightOperand;
  Attribute<AExpression> result;
  String operator;
    result = InstanceOfExpression();
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
        ;
        break;
      default:
        jj_la1[57] = jj_gen;
        break label_25;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        jj_consume_token(EQ);
                operator = "==";
        break;
      case NE:
        jj_consume_token(NE);
                operator = "!=";
        break;
      default:
        jj_la1[58] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      rightOperand = InstanceOfExpression();
      result = NameAnalysis.asAttribute
                 (factory().createBinaryOperation
                   (result, operator, rightOperand));
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public Attribute<AExpression> InstanceOfExpression() throws ParseException {
  Attribute<AType> type;
  Attribute<AExpression>    result;
    result = RelationalExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INSTANCEOF:
      jj_consume_token(INSTANCEOF);
      type = Type(new Token[1]);
      result = NameAnalysis.asAttribute
                 (factory().createInstanceof (result, type));
      break;
    default:
      jj_la1[59] = jj_gen;
      ;
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public Attribute<AExpression> RelationalExpression() throws ParseException {
  Attribute<AExpression> rightOperand;
  Attribute<AExpression> result;
  String operator;
    result = ShiftExpression();
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
      case LT:
      case LE:
      case GE:
        ;
        break;
      default:
        jj_la1[60] = jj_gen;
        break label_26;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        jj_consume_token(LT);
               operator = "<";
        break;
      case GT:
        jj_consume_token(GT);
               operator = ">";
        break;
      case LE:
        jj_consume_token(LE);
               operator = "<=";
        break;
      case GE:
        jj_consume_token(GE);
               operator = ">=";
        break;
      default:
        jj_la1[61] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      rightOperand = ShiftExpression();
      result = NameAnalysis.asAttribute
                 (factory().createBinaryOperation
                   (result, operator, rightOperand));
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public Attribute<AExpression> ShiftExpression() throws ParseException {
  Attribute<AExpression> rightOperand;
  Attribute<AExpression> result;
  String operator;
    result = AdditiveExpression();
    label_27:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSHIFT:
      case RSIGNEDSHIFT:
      case RUNSIGNEDSHIFT:
        ;
        break;
      default:
        jj_la1[62] = jj_gen;
        break label_27;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSHIFT:
        jj_consume_token(LSHIFT);
                operator = "<<";
        break;
      case RSIGNEDSHIFT:
        jj_consume_token(RSIGNEDSHIFT);
                operator = ">>";
        break;
      case RUNSIGNEDSHIFT:
        jj_consume_token(RUNSIGNEDSHIFT);
                operator = ">>>";
        break;
      default:
        jj_la1[63] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      rightOperand = AdditiveExpression();
      result = NameAnalysis.asAttribute
                 (factory().createBinaryOperation
                   (result, operator, rightOperand));
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public Attribute<AExpression> AdditiveExpression() throws ParseException {
  Attribute<AExpression> rightOperand;
  Attribute<AExpression> result;
  String operator;
    result = MultiplicativeExpression();
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[64] = jj_gen;
        break label_28;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
               operator = "+";
        break;
      case MINUS:
        jj_consume_token(MINUS);
               operator = "-";
        break;
      default:
        jj_la1[65] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      rightOperand = MultiplicativeExpression();
      result = NameAnalysis.asAttribute
                 (factory().createBinaryOperation
                   (result, operator, rightOperand));
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public Attribute<AExpression> MultiplicativeExpression() throws ParseException {
  Attribute<AExpression> rightOperand;
  Attribute<AExpression> result;
  String operator;
    result = UnaryExpression();
    label_29:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
      case REM:
        ;
        break;
      default:
        jj_la1[66] = jj_gen;
        break label_29;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
               operator = "*";
        break;
      case SLASH:
        jj_consume_token(SLASH);
               operator = "/";
        break;
      case REM:
        jj_consume_token(REM);
               operator = "%";
        break;
      default:
        jj_la1[67] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      rightOperand = UnaryExpression();
      result = NameAnalysis.asAttribute
                 (factory().createBinaryOperation
                   (result, operator, rightOperand));
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public Attribute<AExpression> UnaryExpression() throws ParseException {
  String operator;
  Attribute<AExpression> operand;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
            operator = "+";
        break;
      case MINUS:
        jj_consume_token(MINUS);
            operator = "-";
        break;
      default:
        jj_la1[68] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      operand = UnaryExpression();
    {if (true) return NameAnalysis.asAttribute
             (factory().createUnaryOperation (operand, operator, false));}
      break;
    case INCR:
      operand = PreIncrementExpression();
    {if (true) return operand;}
      break;
    case DECR:
      operand = PreDecrementExpression();
    {if (true) return operand;}
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
      operand = UnaryExpressionNotPlusMinus();
    {if (true) return operand;}
      break;
    default:
      jj_la1[69] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Attribute<AExpression> PreIncrementExpression() throws ParseException {
  Attribute<AExpression> operand;
    jj_consume_token(INCR);
    operand = PrimaryExpression();
    {if (true) return NameAnalysis.asAttribute
             (factory().createUnaryOperation (operand, "++", false));}
    throw new Error("Missing return statement in function");
  }

  static final public Attribute<AExpression> PreDecrementExpression() throws ParseException {
  Attribute<AExpression> operand;
    jj_consume_token(DECR);
    operand = PrimaryExpression();
    {if (true) return NameAnalysis.asAttribute
             (factory().createUnaryOperation (operand, "--", false));}
    throw new Error("Missing return statement in function");
  }

  static final public Attribute<AExpression> UnaryExpressionNotPlusMinus() throws ParseException {
  String operator;
  Attribute<AExpression> operand;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BANG:
    case TILDE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TILDE:
        jj_consume_token(TILDE);
            operator = "~";
        break;
      case BANG:
        jj_consume_token(BANG);
            operator = "!";
        break;
      default:
        jj_la1[70] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      operand = UnaryExpression();
    {if (true) return NameAnalysis.asAttribute
             (factory().createUnaryOperation (operand, operator, false));}
      break;
    default:
      jj_la1[71] = jj_gen;
      if (isTypeCast()) {
        operand = CastExpression();
    {if (true) return operand;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
          operand = PostfixExpression();
    {if (true) return operand;}
          break;
        default:
          jj_la1[72] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Attribute<AExpression> PostfixExpression() throws ParseException {
  Attribute<AExpression> operand;
    operand = PrimaryExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
    case DECR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCR:
        jj_consume_token(INCR);
             operand = NameAnalysis.asAttribute
                         (factory().createUnaryOperation (operand, "++", true));
        break;
      case DECR:
        jj_consume_token(DECR);
             operand = NameAnalysis.asAttribute
                         (factory().createUnaryOperation (operand, "--", true));
        break;
      default:
        jj_la1[73] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[74] = jj_gen;
      ;
    }
    {if (true) return operand;}
    throw new Error("Missing return statement in function");
  }

  static final public Attribute<AExpression> CastExpression() throws ParseException {
  Attribute<AExpression> operand;
  Attribute<AType>       castType;
    if (isPrimitiveTypeCast()) {
      jj_consume_token(LPAREN);
      castType = Type(new Token[1]);
      jj_consume_token(RPAREN);
      operand = UnaryExpression();
    {if (true) return NameAnalysis.asAttribute
             (factory().createCast (operand, castType));}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        castType = Type(new Token[1]);
        jj_consume_token(RPAREN);
        operand = UnaryExpressionNotPlusMinus();
    {if (true) return NameAnalysis.asAttribute
             (factory().createCast (operand, castType));}
        break;
      default:
        jj_la1[75] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Attribute<AExpression> PrimaryExpression() throws ParseException {
  Attribute<AExpression> prefixExpression = null;
  java.lang.Object       prefix,
                         suffix;
  QualifiedName          qname;
    prefix = PrimaryPrefix();
    if (prefix instanceof QualifiedName) {
      prefixExpression = null;
      qname             = (QualifiedName)prefix;
    } else {
      prefixExpression = (Attribute)prefix;
      qname             = null;
    }
    label_30:
    while (true) {
      if (isPrimarySuffix()) {
        ;
      } else {
        break label_30;
      }
      suffix = PrimarySuffix();
      if (suffix instanceof String) {
        if(suffix.equals("this"))
        {
          if(prefixExpression!=null) {if (true) throw new RuntimeException(".this may only occur after a qualified name");}
          ThisImpl newThis = factory().createThis();
          newThis.setThisClass(NameAnalysis.createUserTypeAttributeAsUserType(qname, currentScope));
          prefixExpression = NameAnalysis.asAttribute(newThis);
          qname = null;
        }
        else if(suffix.equals("super"))
        {
          if(prefixExpression!=null) {if (true) throw new RuntimeException(".super may only occur after a qualified name");}
          ThisImpl newThis = factory().createThis();
          newThis.setThisClass(NameAnalysis.createUserTypeAttributeAsUserType(qname, currentScope));
          newThis.isSuper(true);
          prefixExpression = NameAnalysis.asAttribute(newThis);
          qname = null;
        }
        else
        {
          if (qname != null)
            qname = new QualifiedName((String)suffix, qname);
          else
            qname = QualifiedName.from((String)suffix);
        }
      } else if (suffix instanceof AArgumentsExpressionImpl) {
        // This is either an object allocation, anonymous allocation, or an array allocation.
        // If it's an array allocation, it is an error:
        if(suffix instanceof ArrayAllocation)
        {
          {if (true) throw new RuntimeException("array allocation cannot be suffix.");}
        }
        else if(suffix instanceof ObjectAllocationImpl)
        {
          Attribute<AExpression> pre = prefixExpression;
          if(pre==null) pre = NameAnalysis.createAccessExpressionAttribute(null, qname, currentScope);
          ((ObjectAllocationImpl)suffix).setPrefix(pre);
          ((ObjectAllocationImpl)suffix).setScope(currentScope);
          prefixExpression = NameAnalysis.asAttribute((ObjectAllocationImpl)suffix);
          qname = null;
        }
      } else if (suffix instanceof Attribute/*<AExpression>*/) {
        // this is an array index
        if (qname == null) {
          // the array is anonymous (return value or multi-dimensional)
          prefixExpression = NameAnalysis.asAttribute
            (factory().createArrayAccess (prefixExpression,
                                        (Attribute)suffix));
        } else {
          // access to named array: create an attribute for the array first...
          prefixExpression = NameAnalysis.createAccessExpressionAttribute
                               (prefixExpression,
                                qname,
                                currentScope);
          qname = null;
          // ...and now an attribute for the indexed access
          prefixExpression = NameAnalysis.asAttribute
            (factory().createArrayAccess (prefixExpression,
                                        (Attribute)suffix));
        }
      } else if (suffix instanceof List/*<Attribute<AExpression>>*/) {
        // this is a method call
        prefixExpression = NameAnalysis.createMethodCallExpressionAttribute
            (prefixExpression,
             qname,
             currentScope,
             (List)suffix);
        qname = null;
      } else {
        {if (true) throw new RuntimeException("unknown suffix type");}
      }
    }
    if (qname == null)
      {if (true) return prefixExpression;}
    else
      {if (true) return NameAnalysis.createAccessExpressionAttribute (prefixExpression,
                                                           qname,
                                                           currentScope);}
    throw new Error("Missing return statement in function");
  }

  static final public java.lang.Object PrimaryPrefix() throws ParseException {
  java.lang.Object result;
  Token t;
  Attribute<barat.reflect.AType> type;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case NULL:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      result = Literal();
    {if (true) return NameAnalysis.asAttribute ((LiteralImpl)result);}
      break;
    case THIS:
      jj_consume_token(THIS);
    final ThisImpl ths = factory().createThis();
    ths.line_number(token.beginLine);
    ths.setThisClass (NameAnalysis.createThisClassAttribute (currentScope, false));
    {if (true) return NameAnalysis.asAttribute(ths);}
      break;
    case SUPER:
      jj_consume_token(SUPER);

    final ThisImpl spr = factory().createThis();
    spr.line_number(token.beginLine);
    spr.setThisClass (NameAnalysis.createThisClassAttribute (currentScope, false));
    spr.isSuper(true);
    {if (true) return NameAnalysis.asAttribute(spr);}
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      result = Expression();
      jj_consume_token(RPAREN);
    {if (true) return NameAnalysis.asAttribute
      (factory().createParenExpression ((Attribute)result));}
      break;
    case NEW:
      result = AllocationExpression();
    {if (true) return NameAnalysis.asAttribute ((AExpression)result);}
      break;
    default:
      jj_la1[76] = jj_gen;
      if (isClassSelector()) {
        type = ResultType(new Token[1]);
        jj_consume_token(DOT);
        jj_consume_token(CLASS);
    {if (true) return NameAnalysis.asAttribute(factory().createClassExpression(type));}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          result = Name(new Token[1]);
    {if (true) return result;}
          break;
        default:
          jj_la1[77] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public java.lang.Object PrimarySuffix() throws ParseException {
  java.lang.Object result;
  Token t;
    if (getToken(1).kind == DOT && getToken(2).kind == THIS) {
      jj_consume_token(DOT);
      jj_consume_token(THIS);
    {if (true) return "this";} /* this (sic!) is handled in PrimaryExpression() */
    } else if (getToken(1).kind == DOT && getToken(2).kind == SUPER) {
      jj_consume_token(DOT);
      jj_consume_token(SUPER);
    {if (true) return "super";} /* this is handled in PrimaryExpression() */
    } else if (getToken(1).kind == DOT && getToken(2).kind == NEW) {
      jj_consume_token(DOT);
      result = AllocationExpression();
    {if (true) return result;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        jj_consume_token(LBRACKET);
        result = Expression();
        jj_consume_token(RBRACKET);
    {if (true) return result;}
        break;
      case DOT:
        jj_consume_token(DOT);
        t = jj_consume_token(IDENTIFIER);
    {if (true) return t.image;}
        break;
      case LPAREN:
        result = Arguments();
    {if (true) return result;}
        break;
      default:
        jj_la1[78] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public LiteralImpl Literal() throws ParseException {
  Token t;
  LiteralImpl result;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
    { String data = t.image;
    if (   data.charAt (data.length()-1) == 'l'
        || data.charAt (data.length()-1) == 'L') {
      long longInt;
      if (data.startsWith ("0x") || data.startsWith ("0X"))
        longInt = parseLong (data.substring (2, data.length()-1), 16);
      else if (data.startsWith ("0") && data.length() > 1)
        longInt = parseLong (data.substring (1, data.length()-1), 8);
      else
        longInt = parseLong (data.substring (0, data.length()-1), 10);
      result = factory().createLiteral (new Long (longInt));
      result.line_number(token.beginLine);
      {if (true) return result;}
    } else {
      int i;
      if (data.startsWith ("0x") || data.startsWith ("0X"))
        i = parseInt (data.substring (2, data.length()), 16);
      else if (data.startsWith ("0") && data.length() > 1)
        i = parseInt (data.substring (1, data.length()), 8);
      else
        i = parseInt (data.substring (0, data.length()), 10);
      result = factory().createLiteral (new Integer (i));
      result.line_number(token.beginLine);
      {if (true) return result;}
    }
  }
      break;
    case FLOATING_POINT_LITERAL:
      t = jj_consume_token(FLOATING_POINT_LITERAL);
    {
      if(t.image.charAt (t.image.length()-1) == 'f'
      || t.image.charAt (t.image.length()-1) == 'F')
        result= factory().createLiteral (Float.valueOf (t.image));
      else
        // By default floating point literals are always double
        result = factory().createLiteral(Double.valueOf(t.image));
      result.line_number(token.beginLine);
      {if (true) return result;}
  }
      break;
    case CHARACTER_LITERAL:
      t = jj_consume_token(CHARACTER_LITERAL);
                                 result = factory().createLiteral
                                   (new Character(parseChar(t.image.substring(1,t.image.length()-1))));
                                 result.line_number(token.beginLine);
                                 {if (true) return result;}
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
                                 result = factory().createLiteral(
                                   parseString(
                                   (t.image.substring(1,t.image.length()-1))));
                                 result.line_number(token.beginLine);
                                 {if (true) return result;}
      break;
    case FALSE:
    case TRUE:
      result = BooleanLiteral();
                                 {if (true) return result;}
      break;
    case NULL:
      result = NullLiteral();
                                 {if (true) return result;}
      break;
    default:
      jj_la1[79] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public LiteralImpl BooleanLiteral() throws ParseException {
  LiteralImpl result;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
             result = factory().createLiteral (Boolean.TRUE); result.line_number(token.beginLine); {if (true) return result;}
      break;
    case FALSE:
      jj_consume_token(FALSE);
             result = factory().createLiteral (Boolean.FALSE); result.line_number(token.beginLine); {if (true) return result;}
      break;
    default:
      jj_la1[80] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public LiteralImpl NullLiteral() throws ParseException {
  LiteralImpl result;
    jj_consume_token(NULL);
             result = factory().createLiteral (null); result.line_number(token.beginLine); {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public List<Attribute<AExpression>> Arguments() throws ParseException {
  List<Attribute<AExpression>> result = null;
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      result = ArgumentList();
      break;
    default:
      jj_la1[81] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    if (result == null)
      // When there are no arguments, return an empty list.
      // (We cannot return null, otherwise the kind of primary suffix
      // could not be recognized by our caller.)
      {if (true) return new ArrayList<Attribute<AExpression>>();}
    else
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public List<Attribute<AExpression>> ArgumentList() throws ParseException {
  List<Attribute<AExpression>> result;
  Attribute<AExpression>       item;
    result = new ArrayList<Attribute<AExpression>>();
    token_source.rememberTagsForExpression(currentScope);
    item = Expression();
    result.add(item);
    token_source.setTagsFor(item, token_source.getTagsForExpression());
    label_31:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[82] = jj_gen;
        break label_31;
      }
      jj_consume_token(COMMA);
    token_source.rememberTagsForExpression(currentScope);
      item = Expression();
    result.add (item);
    token_source.setTagsFor(item, token_source.getTagsForExpression());
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public AArgumentsExpressionImpl AllocationExpression() throws ParseException {
  PrimitiveTypeImpl    ptype;
  QualifiedName        name;
  ArrayAllocationImpl  arrayAllocation;
  List<Attribute<AExpression>>   arguments;
  Token t = null;
  ClassImpl c = null;
  Scope oldScope;

  List<String> stored_tags;
    if (getToken(2).kind != IDENTIFIER) {
      t = jj_consume_token(NEW);
      ptype = PrimitiveType(new Token[1]);
      arrayAllocation = ArrayDimsAndInits();
    arrayAllocation.setElementType (new Constant<AType> (ptype));
    token_source.setTagsFor(arrayAllocation, t.endLine, currentScope);
    arrayAllocation.line_number(t.beginLine);
    {if (true) return arrayAllocation;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
        t = jj_consume_token(NEW);
        name = Name(new Token[1]);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          arrayAllocation = ArrayDimsAndInits();
        arrayAllocation.setElementType
             (NameAnalysis.createUserTypeAttribute (name, currentScope));
        token_source.setTagsFor(arrayAllocation, t.endLine, currentScope);
        arrayAllocation.line_number(t.beginLine);
        {if (true) return arrayAllocation;}
          break;
        case LPAREN:
         stored_tags = token_source.storedTags;
         token_source.storedTags = new ArrayList<String>();
          arguments = Arguments();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACE:
          Scope scope = currentScope;
          while(!(scope instanceof ClassImpl))
          {
            scope = scope.getEnclosingScope();
          }
          ClassImpl enclosingClass = (ClassImpl)scope;
          int anonymousIndex = enclosingClass.getNextAnonymousIndex();
          c = factory().createClass(enclosingClass.getName() + "$" + anonymousIndex, null);
          c.setDelegate_modifiers(factory().createModifiers());
          c.setEnclosingScope(currentScope);
          oldScope = currentScope;
          currentScope = c;
            ClassBody(c);
          currentScope = oldScope;
          Attribute<Class> anonClass = NameAnalysis.createAnonymousClassAttribute(c, name, currentScope);
          AnonymousAllocationImpl alloc = factory().createAnonymousAllocation(arguments, anonClass);
          alloc.setCalledConstructor(NameAnalysis.createConstructorAttribute (
                                                    name,
                                                    currentScope,
                                                    arguments, alloc));
          token_source.setTagsFor(alloc, t.endLine, currentScope, stored_tags);
          alloc.line_number(t.beginLine);
          {if (true) return alloc;}
            break;
          default:
            jj_la1[83] = jj_gen;
            ;
          }
        ObjectAllocationImpl objectAllocation = factory().createObjectAllocation(arguments);
        objectAllocation.setCalledConstructor(
           NameAnalysis.createConstructorAttribute (name,
                                                    currentScope,
                                                    arguments, objectAllocation));
        token_source.setTagsFor(objectAllocation, t.endLine, currentScope, stored_tags);
        objectAllocation.line_number(t.beginLine);
        {if (true) return objectAllocation;}
          break;
        default:
          jj_la1[84] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[85] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

/*
 * The third LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
  static final public ArrayAllocationImpl ArrayDimsAndInits() throws ParseException {
  ArrayAllocationImpl         result;
  Attribute<AExpression>      expression;
  Attribute<AExpression>      initializer;
  int                         freeDimensions;
    if (getToken(2).kind != RBRACKET) {
    result         = factory().createArrayAllocation();
    freeDimensions = 0;
      label_32:
      while (true) {
        jj_consume_token(LBRACKET);
        expression = Expression();
        jj_consume_token(RBRACKET);
      result.addArgument (expression);
        if (getToken(1).kind == LBRACKET && getToken(2).kind != RBRACKET) {
          ;
        } else {
          break label_32;
        }
      }
      label_33:
      while (true) {
        if (getToken(1).kind == LBRACKET && getToken(2).kind == RBRACKET) {
          ;
        } else {
          break label_33;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
      freeDimensions++;
      }
    result.freeDimensions (freeDimensions);
    {if (true) return result;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
    result         = factory().createArrayAllocation();
    freeDimensions = 0;
        label_34:
        while (true) {
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
      freeDimensions++;
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            ;
            break;
          default:
            jj_la1[86] = jj_gen;
            break label_34;
          }
        }
        initializer = ArrayInitializer();
    result.freeDimensions (freeDimensions);
    result.setInitializer
      (new CastingAttribute<AExpression,ArrayInitializer> (initializer));
    {if (true) return result;}
        break;
      default:
        jj_la1[87] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

/*
 * Statement syntax follows.
 */
  static final public AStatementImpl Statement() throws ParseException {
  AStatementImpl result;
  Attribute<AExpression> e;
  Token startToken = null;
   startToken=getToken(1);
    if (getToken(1).kind == IDENTIFIER && getToken(2).kind == COLON) {
      result = LabeledStatement();
                                           token_source.new_setTagsFor(result, startToken); {if (true) return result;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        result = Block();
                                           token_source.new_setTagsFor(result, startToken); {if (true) return result;}
        break;
      case SEMICOLON:
        result = EmptyStatement();
                                           token_source.new_setTagsFor(result, startToken); {if (true) return result;}
        break;
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case INCR:
      case DECR:
        e = StatementExpression();
        jj_consume_token(SEMICOLON);
        result =  factory().createExpressionStatement (e); result.line_number(token.beginLine); token_source.new_setTagsFor(result, startToken); {if (true) return result;}
        break;
      case SWITCH:
        result = SwitchStatement();
                                           token_source.new_setTagsFor(result, startToken); {if (true) return result;}
        break;
      case IF:
        result = IfStatement();
                                           token_source.new_setTagsFor(result, startToken); {if (true) return result;}
        break;
      case WHILE:
        result = WhileStatement();
                                           token_source.new_setTagsFor(result, startToken); {if (true) return result;}
        break;
      case DO:
        result = DoStatement();
                                           token_source.new_setTagsFor(result, startToken); {if (true) return result;}
        break;
      case FOR:
        result = ForStatement();
                                           token_source.new_setTagsFor(result, startToken); {if (true) return result;}
        break;
      case BREAK:
        result = BreakStatement();
                                           token_source.new_setTagsFor(result, startToken); {if (true) return result;}
        break;
      case CONTINUE:
        result = ContinueStatement();
                                           token_source.new_setTagsFor(result, startToken); {if (true) return result;}
        break;
      case RETURN:
        result = ReturnStatement();
                                           token_source.new_setTagsFor(result, startToken); {if (true) return result;}
        break;
      case THROW:
        result = ThrowStatement();
                                           token_source.new_setTagsFor(result, startToken); {if (true) return result;}
        break;
      case SYNCHRONIZED:
        result = SynchronizedStatement();
                                           token_source.new_setTagsFor(result, startToken); {if (true) return result;}
        break;
      case TRY:
        result = TryStatement();
                                           token_source.new_setTagsFor(result, startToken); {if (true) return result;}
        break;
      case ASSERT:
        result = AssertStatement();
                                           token_source.new_setTagsFor(result, startToken); {if (true) return result;}
        break;
      default:
        jj_la1[88] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public AStatementImpl LabeledStatement() throws ParseException {
  Token t;
  AStatementImpl s;
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(COLON);
    s = Statement();
    ((ATargetStatementImpl)s).label (t.image);
    s.line_number(t.beginLine);
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public BlockImpl Block() throws ParseException {
  BlockImpl block;
  Scope enclosingScope = currentScope;
    block = factory().createBlock();
    block.setEnclosingScope(currentScope);
    currentScope=block;
    jj_consume_token(LBRACE);
    block.line_number(token.beginLine);
    label_35:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSERT:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CLASS:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case RETURN:
      case SHORT:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRUE:
      case TRY:
      case VOID:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case INCR:
      case DECR:
        ;
        break;
      default:
        jj_la1[89] = jj_gen;
        break label_35;
      }
      BlockStatement(block);
    }
    jj_consume_token(RBRACE);
    currentScope = enclosingScope;
    {if (true) return block;}
    throw new Error("Missing return statement in function");
  }

  static final public void BlockStatement(NodeImpl container) throws ParseException {
  AStatementImpl s;
  Modifiers m;
    if (isLocalVariableDeclaration()) {
      LocalVariableDeclaration(container);
      jj_consume_token(SEMICOLON);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSERT:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case RETURN:
      case SHORT:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRUE:
      case TRY:
      case VOID:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case INCR:
      case DECR:
        s = Statement();
    if (container instanceof BlockImpl)
      ((BlockImpl)container).addStatement (s);
    else if (container instanceof ASwitchBranchImpl)
      ((ASwitchBranchImpl)container).addStatement (s);
        break;
      case CLASS:
    UserTypeDeclarationImpl utd1 = factory().createUserTypeDeclaration();
    s = utd1;
    m = factory().createModifiers();
    utd1.setEnclosingScope(currentScope);
    currentScope = utd1;
        UnmodifiedClassDeclaration(s, m, null);
    if (container instanceof BlockImpl)
      ((BlockImpl)container).addStatement (s);
    else if (container instanceof ASwitchBranchImpl)
      ((ASwitchBranchImpl)container).addStatement (s);
        break;
      case INTERFACE:
    UserTypeDeclarationImpl utd2 = factory().createUserTypeDeclaration();
    s = utd2;
    m = factory().createModifiers();
    utd2.setEnclosingScope(currentScope);
    currentScope = utd2;
        UnmodifiedInterfaceDeclaration(s, m, null);
    if (container instanceof BlockImpl)
      ((BlockImpl)container).addStatement (s);
    else if (container instanceof ASwitchBranchImpl)
      ((ASwitchBranchImpl)container).addStatement (s);
        break;
      default:
        jj_la1[90] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void LocalVariableDeclaration(NodeImpl container) throws ParseException {
  Attribute<AType>     type;
  Modifiers modifiers = new Modifiers();
  Token startToken = null;
  Token[] tHolder = new Token[1];
  NodeImpl item;
  LocalVariableImpl    lv;
  Token remember_me = null;
  VariableDeclarationImpl  vd;
    modifiers = factory().createModifiers();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINAL:
      startToken = jj_consume_token(FINAL);
                         modifiers.isFinal(true);
      break;
    default:
      jj_la1[91] = jj_gen;
      ;
    }
    type = Type(tHolder);
    if(startToken==null) startToken=tHolder[0];
    remember_me = token;
    item = VariableDeclarator(type, true, startToken);
    lv = (LocalVariableImpl)item;
    lv.setDelegate_modifiers (modifiers);
    vd = factory().createVariableDeclaration(lv);
    vd.line_number(remember_me.beginLine);
    vd.setEnclosingScope(currentScope);
    currentScope = vd;
    if (container instanceof BlockImpl)
      ((BlockImpl)container).addStatement (vd);
    else if (container instanceof ASwitchBranchImpl)
      ((ASwitchBranchImpl)container).addStatement (vd);
    else if (container instanceof ForInitDeclarationImpl)
      ((ForInitDeclarationImpl)container).addDeclaration(vd);
    label_36:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[92] = jj_gen;
        break label_36;
      }
      jj_consume_token(COMMA);
          remember_me = token;
      item = VariableDeclarator(type, true, startToken);
        lv = (LocalVariableImpl)item;
        lv.setDelegate_modifiers (modifiers);
        vd = factory().createVariableDeclaration(lv);
        vd.line_number(remember_me.beginLine);
        vd.setEnclosingScope(currentScope);
        currentScope = vd;
        if (container instanceof BlockImpl)
          ((BlockImpl)container).addStatement (vd);
        else if (container instanceof ASwitchBranchImpl)
          ((ASwitchBranchImpl)container).addStatement (vd);
        else if (container instanceof ForInitDeclarationImpl)
          ((ForInitDeclarationImpl)container).addDeclaration(vd);
    }
  }

  static final public EmptyStatementImpl EmptyStatement() throws ParseException {
  EmptyStatementImpl result;
    jj_consume_token(SEMICOLON);
        result = factory().createEmptyStatement(); result.line_number(token.beginLine); {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public Attribute<AExpression> StatementExpression() throws ParseException {
  Attribute<AExpression> expression;
  String operator;
  Attribute<AExpression> rightOperand;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
      expression = PreIncrementExpression();
    {if (true) return expression;}
      break;
    case DECR:
      expression = PreDecrementExpression();
    {if (true) return expression;}
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
      expression = PrimaryExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
      case INCR:
      case DECR:
      case PLUSASSIGN:
      case MINUSASSIGN:
      case STARASSIGN:
      case SLASHASSIGN:
      case ANDASSIGN:
      case ORASSIGN:
      case XORASSIGN:
      case REMASSIGN:
      case LSHIFTASSIGN:
      case RSIGNEDSHIFTASSIGN:
      case RUNSIGNEDSHIFTASSIGN:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INCR:
          jj_consume_token(INCR);
      expression = NameAnalysis.asAttribute
                     (factory().createUnaryOperation (expression, "++", true));
          break;
        case DECR:
          jj_consume_token(DECR);
      expression = NameAnalysis.asAttribute
                     (factory().createUnaryOperation (expression, "--", true));
          break;
        case ASSIGN:
        case PLUSASSIGN:
        case MINUSASSIGN:
        case STARASSIGN:
        case SLASHASSIGN:
        case ANDASSIGN:
        case ORASSIGN:
        case XORASSIGN:
        case REMASSIGN:
        case LSHIFTASSIGN:
        case RSIGNEDSHIFTASSIGN:
        case RUNSIGNEDSHIFTASSIGN:
          operator = AssignmentOperator();
          rightOperand = Expression();
      expression = NameAnalysis.asAttribute
        (factory().createAssignment (expression, operator, rightOperand));
          break;
        default:
          jj_la1[93] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[94] = jj_gen;
        ;
      }
    {if (true) return expression;}
      break;
    default:
      jj_la1[95] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public SwitchImpl SwitchStatement() throws ParseException {
  SwitchImpl sw;
  ASwitchBranchImpl branch;
  Attribute<AExpression> e;
  Scope enclosingScope = currentScope;
    jj_consume_token(SWITCH);
    sw = factory().createSwitch(); sw.line_number(token.beginLine);
    jj_consume_token(LPAREN);
    e = Expression();
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    sw.setExpression (e);
    label_37:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
      case _DEFAULT:
        ;
        break;
      default:
        jj_la1[96] = jj_gen;
        break label_37;
      }
      branch = SwitchLabel();
      label_38:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CHAR:
        case CLASS:
        case CONTINUE:
        case DO:
        case DOUBLE:
        case FALSE:
        case FINAL:
        case FLOAT:
        case FOR:
        case IF:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case RETURN:
        case SHORT:
        case SUPER:
        case SWITCH:
        case SYNCHRONIZED:
        case THIS:
        case THROW:
        case TRUE:
        case TRY:
        case VOID:
        case WHILE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case INCR:
        case DECR:
          ;
          break;
        default:
          jj_la1[97] = jj_gen;
          break label_38;
        }
        BlockStatement(branch);
      }
        sw.addBranche (branch);
    }
    jj_consume_token(RBRACE);
    currentScope = enclosingScope;
    {if (true) return sw;}
    throw new Error("Missing return statement in function");
  }

  static final public ASwitchBranchImpl SwitchLabel() throws ParseException {
  Attribute<AExpression> e; CaseBranchImpl result = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASE:
      jj_consume_token(CASE);
    result = factory().createCaseBranch(); result.line_number(token.beginLine);
      e = Expression();
      jj_consume_token(COLON);
    result.setConstantExpression (e);
    {if (true) return result;}
      break;
    case _DEFAULT:
      jj_consume_token(_DEFAULT);
      jj_consume_token(COLON);
    ASwitchBranchImpl result2 = factory().createDefaultBranch(); result2.line_number(token.beginLine); {if (true) return result2;}
      break;
    default:
      jj_la1[98] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public IfImpl IfStatement() throws ParseException {
  Attribute<AExpression> expression;
  AStatementImpl  thenBranch;
  AStatementImpl  elseBranch = null;
  Token start = null;
  List<String> tags;
    start = jj_consume_token(IF);
    jj_consume_token(LPAREN);
    expression = Expression();
    jj_consume_token(RPAREN);
    thenBranch = Statement();
    tags = token_source.storedTags;
    token_source.storedTags = new ArrayList<String>(); /* backup tags */

    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      elseBranch = Statement();
      break;
    default:
      jj_la1[99] = jj_gen;
      ;
    }
    IfImpl result = factory().createIf (expression, thenBranch, elseBranch);

    token_source.setTagsFor(result, start.endLine, currentScope, tags);

    result.line_number(start.beginLine);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public WhileImpl WhileStatement() throws ParseException {
  Attribute<AExpression> expression;
  AStatementImpl  body;
  Token start = null;
    start = jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    expression = Expression();
    jj_consume_token(RPAREN);
    body = Statement();
    WhileImpl result = factory().createWhile (expression, body);
    result.line_number(start.beginLine);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public DoImpl DoStatement() throws ParseException {
  Attribute<AExpression> expression;
  AStatementImpl  body;
  Token start = null;
    start = jj_consume_token(DO);
    body = Statement();
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    expression = Expression();
    jj_consume_token(RPAREN);
    jj_consume_token(SEMICOLON);
    DoImpl result = factory().createDo (body, expression);
    result.line_number(start.beginLine);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public ForImpl ForStatement() throws ParseException {
  ForImpl         result     = null;
  AForInitImpl    init       = null;
  Attribute<AExpression> expression = null;
  AStatementImpl  body;
  Scope enclosingScope = currentScope;
    jj_consume_token(FOR);
    jj_consume_token(LPAREN);
      result = factory().createFor();
      result.line_number(token.beginLine);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FINAL:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case INCR:
    case DECR:
      ForInit(result);
      break;
    default:
      jj_la1[100] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      expression = Expression();
        result.setExpression (expression);
      break;
    default:
      jj_la1[101] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case INCR:
    case DECR:
      ForUpdate(result);
      break;
    default:
      jj_la1[102] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    body = Statement();
      result.setBody (body);
      currentScope = enclosingScope;
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public void ForInit(ForImpl container) throws ParseException {
  AForInitImpl init;
    if (isLocalVariableDeclaration()) {
    init = factory().createForInitDeclaration();
      LocalVariableDeclaration(init);
    container.setForInit (init);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case INCR:
      case DECR:
    init = factory().createForInitExpression(); init.line_number(token.beginLine);
        StatementExpressionList(init);
    container.setForInit (init);
        break;
      default:
        jj_la1[103] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void StatementExpressionList(NodeImpl container) throws ParseException {
  Attribute<AExpression> e;
    e = StatementExpression();
    if (container instanceof ForInitExpressionImpl)
      ((ForInitExpressionImpl)container).addExpression (e);
    else if (container instanceof ForImpl)
      ((ForImpl)container).addUpdateExpression (e);
    label_39:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[104] = jj_gen;
        break label_39;
      }
      jj_consume_token(COMMA);
      e = StatementExpression();
          if (container instanceof ForInitExpressionImpl)
            ((ForInitExpressionImpl)container).addExpression (e);
          else if (container instanceof ForImpl)
            ((ForImpl)container).addUpdateExpression (e);
    }
  }

  static final public void ForUpdate(ForImpl container) throws ParseException {
    StatementExpressionList(container);
  }

  static final public BreakImpl BreakStatement() throws ParseException {
  Token t;
  String label = null;
  BreakImpl result;
    jj_consume_token(BREAK);
    result = factory().createBreak(); result.line_number(token.beginLine);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
      label = t.image;
      break;
    default:
      jj_la1[105] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    result.setTarget (NameAnalysis.createBreakTargetAttribute(result, label));
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public ContinueImpl ContinueStatement() throws ParseException {
  Token t;
  String label = null;
  ContinueImpl result;
    jj_consume_token(CONTINUE);
    result = factory().createContinue(); result.line_number(token.beginLine);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
      label = t.image;
      break;
    default:
      jj_la1[106] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    result.setTarget (NameAnalysis.createContinueTargetAttribute(result, label));
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public ReturnImpl ReturnStatement() throws ParseException {
  ReturnImpl      result;
  Attribute<AExpression> expression = null;
  Token t = null;
    t = jj_consume_token(RETURN);
    result = factory().createReturn(); result.line_number(token.beginLine);
    token_source.rememberTagsForExpression(currentScope);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      expression = Expression();
      result.setExpression (expression);
      token_source.setTagsFor(expression, token_source.getTagsForExpression());
      break;
    default:
      jj_la1[107] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public ThrowImpl ThrowStatement() throws ParseException {
  Attribute<AExpression> expression;
  Token start = null;
    start = jj_consume_token(THROW);
    expression = Expression();
    jj_consume_token(SEMICOLON);
    ThrowImpl result = factory().createThrow (expression);
    result.line_number(start.beginLine);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public SynchronizedImpl SynchronizedStatement() throws ParseException {
  Attribute<AExpression> expression;
  BlockImpl       block;
  Token start = null;
    start = jj_consume_token(SYNCHRONIZED);
    jj_consume_token(LPAREN);
    expression = Expression();
    jj_consume_token(RPAREN);
    block = Block();
    SynchronizedImpl result = factory().createSynchronized (expression, block);
    result.line_number(start.beginLine);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public AssertImpl AssertStatement() throws ParseException {
  Attribute<AExpression> conditionExpression;
  Attribute<AExpression> failureExpressionOrNull = null;
  Token start = null;
    start = jj_consume_token(ASSERT);
    conditionExpression = Expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      failureExpressionOrNull = Expression();
      break;
    default:
      jj_la1[108] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    AssertImpl result = factory().createAssert (conditionExpression, failureExpressionOrNull);
    result.line_number(start.beginLine);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public TryImpl TryStatement() throws ParseException {
  TryImpl         result;
  ParameterImpl   parameter;
  CatchImpl       catchClause;
  BlockImpl       block;
  Scope           enclosingScope = currentScope;
  Token start=null;
    jj_consume_token(TRY);
    result = factory().createTry(); result.line_number(token.beginLine);
    block = Block();
    result.setBlock (block);
    label_40:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CATCH:
        ;
        break;
      default:
        jj_la1[109] = jj_gen;
        break label_40;
      }
      jj_consume_token(CATCH);
      catchClause = factory().createCatch();
      catchClause.line_number(token.beginLine);
      jj_consume_token(LPAREN);
      parameter = FormalParameter();
      jj_consume_token(RPAREN);
      catchClause.setParameter (parameter);
      catchClause.setEnclosingScope (currentScope);
      currentScope = catchClause;
      block = Block();
      catchClause.setBlock (block);
      result.addCatchClause (catchClause);
      currentScope = enclosingScope;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINALLY:
      start = jj_consume_token(FINALLY);
      block = Block();
      FinallyImpl fi = factory().createFinally (block);
      fi.line_number(start.beginLine);
      result.setFinallyClause (fi);
      break;
    default:
      jj_la1[110] = jj_gen;
      ;
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  static public BaratParserTokenManager token_source;
  static JavaCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[111];
  static final private int[] jj_la1_0 = {0x0,0x0,0x40202000,0x0,0x2000,0x40002000,0x40002000,0x10000000,0x0,0x4432a000,0x40002000,0x40002000,0x44128000,0x0,0x2000,0x2000,0x40002000,0x40002000,0x10000000,0x4432a000,0x44128000,0x0,0x40000000,0x40000000,0x0,0x0,0x0,0x24128000,0x24128000,0x0,0x40002000,0x40002000,0x0,0x0,0x0,0x0,0x44128000,0x40000000,0x0,0x0,0x0,0x66b38000,0x24128000,0x0,0x4128000,0x0,0x4128000,0x4128000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x24128000,0x0,0x0,0x24128000,0x0,0x0,0x0,0x20000000,0x0,0x0,0x20000000,0x20000000,0x24128000,0x0,0x0,0x0,0x0,0x0,0x0,0x2693c000,0x66b3c000,0x26b3c000,0x40000000,0x0,0x0,0x0,0x24128000,0x1040000,0x66b38000,0x1040000,0x8000000,0x64128000,0x24128000,0x24128000,0x24128000,0x0,0x0,0x0,0x24128000,0x0,0x80000,0x80000000,};
  static final private int[] jj_la1_1 = {0x2000,0x20,0x10100,0x0,0x10100,0x10000,0x10000,0x0,0x10,0x644dc781,0x9c000,0x9c000,0x440dc281,0x0,0x10000,0x10000,0x9c000,0x9c000,0x0,0x644dc781,0x440dc281,0x0,0x4409c000,0x4409c000,0x0,0x0,0x0,0x28941a81,0x28941a81,0x0,0x49c400,0x49c400,0x2000000,0x0,0x0,0x0,0x40281,0x0,0x1c000,0x1c000,0x2000000,0xb9f61a8b,0x28941a81,0x80000,0x40281,0x0,0x40281,0x20040281,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x28941a81,0x0,0x0,0x28941a81,0x0,0x0,0x0,0x8901800,0x0,0x0,0x8001000,0x8000000,0x28941a81,0x0,0x0,0x0,0x800,0x0,0x0,0xb9f61a8b,0xb9f61a8b,0xb9f61b8b,0x0,0x0,0x0,0x0,0x28941a81,0x0,0xb9f61a8b,0x0,0x0,0x28941a81,0x28941a81,0x28941a81,0x28941a81,0x0,0x0,0x0,0x28941a81,0x0,0x0,0x0,};
  static final private int[] jj_la1_2 = {0x0,0x0,0x40000,0x100000,0x40001,0x1,0x1,0x0,0x0,0x4201,0x1,0x1,0x200,0x40000,0x1,0x1,0x1,0x1,0x0,0x201,0x200,0x40000,0x0,0x0,0x80000,0x200000,0x10000,0x30053a2,0x30053a2,0x80000,0x1,0x1,0x0,0x44000,0x10000,0x80000,0x200,0x0,0x1,0x1,0x0,0x453a2,0x13a2,0x0,0x200,0x10000,0x0,0x200,0x80000,0x200000,0x200000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x90000000,0x90000000,0x0,0x60c00000,0x60c00000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x30013a2,0x3000000,0x3000000,0x13a2,0x0,0x0,0x1000,0x11a2,0x200,0x111000,0x1a2,0x0,0x30013a2,0x80000,0x4000,0x11000,0x0,0x10000,0x10000,0x453a2,0x453a2,0x453a2,0x0,0x80000,0x200000,0x200000,0x13a2,0x0,0x453a2,0x0,0x0,0x13a2,0x30013a2,0x13a2,0x13a2,0x80000,0x200,0x200,0x30013a2,0x8000000,0x0,0x0,};
  static final private int[] jj_la1_3 = {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3c,0x3c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3ff8000,0x3ff8000,0x0,0x1,0x2,0x200,0x400,0x100,0x0,0x0,0x0,0x0,0x0,0x7000,0x7000,0x30,0x30,0x8c0,0x8c0,0x30,0x3c,0x0,0x0,0x0,0xc,0xc,0x0,0x0,0x0,0x0,0x0,0x0,0x3c,0x0,0x0,0x0,0x0,0x0,0x0,0xc,0xc,0xc,0x0,0x0,0x3ff800c,0x3ff800c,0xc,0x0,0xc,0x0,0x0,0xc,0x3c,0xc,0xc,0x0,0x0,0x0,0x3c,0x0,0x0,0x0,};

  public BaratParser(java.io.InputStream stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new BaratParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 111; i++) jj_la1[i] = -1;
  }

  static public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 111; i++) jj_la1[i] = -1;
  }

  public BaratParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new BaratParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 111; i++) jj_la1[i] = -1;
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 111; i++) jj_la1[i] = -1;
  }

  public BaratParser(BaratParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 111; i++) jj_la1[i] = -1;
  }

  public void ReInit(BaratParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 111; i++) jj_la1[i] = -1;
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  static final public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[122];
    for (int i = 0; i < 122; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 111; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 122; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

}
