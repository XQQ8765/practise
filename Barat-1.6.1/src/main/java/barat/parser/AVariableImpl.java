/*
 * File: AVariableImpl.java
 *
 * $Id: AVariableImpl.java,v 1.13 2000/11/20 01:51:01 bokowski Exp $
 *
 * This file is part of Barat.
 * Copyright (c) 1998-2000 Boris Bokowski (bokowski@users.sourceforge.net)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 *
 *   Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in the
 *   documentation and/or other materials provided with the distribution.
 *
 *   Neither the name of Boris Bokowski nor the names of his contributors
 *   may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL BORIS BOKOWSKI
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package barat.parser;

/* generated by Boris Bokowski's rosegen on Sat Jul 11 18:35:38 GMT+03:30 1998
*/

import barat.reflect.AVariable;

import barat.reflect.AType;


public abstract class AVariableImpl extends NodeImpl implements AVariable, ImplATyped, ImplANamed
{
	private Attribute<AType> type;
	private String name;
	private boolean isFinal = false;
	public AVariableImpl( String name_)
	{
		super( );
		name = name_;
	}
	public AVariableImpl( Attribute<AType> type_, String name_)
	{
		super( );
		type = type_;
		name = name_;
	}
	public AVariableImpl() {}
	public void setType( Attribute<AType> type_ )
	{
		type = type_;
//		type.setupContainment(this, "type");
	}
	public AType getType()
	{
		return type.value();
	}
	/** -1: not equal, 0: can't determine without parsing (or already parsed), 1: equal */
	int quickEqualsType(AVariableImpl other)
	{
		if(type.hasValue() && other.type.hasValue()) return 0; // already parsed
		// make sure that both Attributes are TypeAttributes:
		if(!(type instanceof TypeAttribute)) return 0;
		if(!(other.type instanceof TypeAttribute)) return 0;
		return ((TypeAttribute<AType>)type).quickEqualsType((TypeAttribute<AType>)other.type);
	}
	public void setName( String name_ )
	{
		name = name_;
	}
	public String getName()
	{
		return name;
	}
        public String qualifiedName() 
        {
                return barat.parser.NameAnalysis.qualifiedNameOf (this);
        }
    public boolean isFinal()
	{
		return isFinal;
	}
	public void isFinal(boolean isFinal_)
	{
		isFinal = isFinal_;
	}
	abstract public void accept(barat.Visitor v);
	abstract public void accept(barat.parser.ImplementationVisitor v);
}
