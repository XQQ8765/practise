/*
 * File: ArrayAllocationImpl.java
 *
 * $Id: ArrayAllocationImpl.java,v 1.12 2000/11/20 01:51:01 bokowski Exp $
 *
 * This file is part of Barat.
 * Copyright (c) 1998-2000 Boris Bokowski (bokowski@users.sourceforge.net)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 *
 *   Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in the
 *   documentation and/or other materials provided with the distribution.
 *
 *   Neither the name of Boris Bokowski nor the names of his contributors
 *   may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL BORIS BOKOWSKI
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package barat.parser;

/* generated by Boris Bokowski's rosegen on Sat Jul 11 18:34:40 GMT+03:30 1998
*/

import barat.reflect.ArrayAllocation;
import barat.reflect.AExpression;

import barat.collections.AExpressionList;
import barat.collections.AExpressionArrayList;
import barat.collections.AExpressionIterator;
import barat.reflect.AType;

import barat.reflect.ArrayInitializer;
import java.util.*;
//import java.util.*;


public class ArrayAllocationImpl extends AArgumentsExpressionImpl implements ArrayAllocation
{
	private Attribute<AType> elementType;
	private Attribute<ArrayInitializer> initializer;
	private int freeDimensions = 0;
	public ArrayAllocationImpl( List<Attribute<AExpression>> arguments_, Attribute<ArrayInitializer> initializer_)
	{
		super( arguments_);
		initializer = initializer_;
		if(initializer!=null)
			initializer.setupContainment(this, "initializer");
	}
	public ArrayAllocationImpl( List<Attribute<AExpression>> arguments_, Attribute<AType> elementType_, Attribute<ArrayInitializer> initializer_)
	{
		super( arguments_);
		elementType = elementType_;
		initializer = initializer_;
		if(initializer!=null)
			initializer.setupContainment(this, "initializer");
	}
	public ArrayAllocationImpl() {}
	public void setElementType( Attribute<AType> elementType_ )
	{
		elementType = elementType_;
//		elementType.setupContainment(this, "elementType");
	}
	public AType getElementType()
	{
		return elementType.value();
	}
	public void setInitializer( Attribute<ArrayInitializer> initializer_ )
	{
		initializer = initializer_;
		initializer.setupContainment(this, "initializer");
	}
	public ArrayInitializer getInitializer()
	{
		if(initializer!=null) return initializer.value(); else return null;
	}
	public int freeDimensions()
	{
		return freeDimensions;
	}
	public void freeDimensions(int freeDimensions_)
	{
		freeDimensions = freeDimensions_;
	}
	public void accept(barat.Visitor v)
	{
		v.visitArrayAllocation(this);
	}
	public void accept(barat.parser.ImplementationVisitor v)
	{
		v.visitArrayAllocationImpl(this);
	}
}
