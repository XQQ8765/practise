/*
 * File: PrimitiveTypeImpl.java
 *
 * $Id: PrimitiveTypeImpl.java,v 1.9 2000/11/20 01:51:08 bokowski Exp $
 *
 * This file is part of Barat.
 * Copyright (c) 1998-2000 Boris Bokowski (bokowski@users.sourceforge.net)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 *
 *   Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in the
 *   documentation and/or other materials provided with the distribution.
 *
 *   Neither the name of Boris Bokowski nor the names of his contributors
 *   may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL BORIS BOKOWSKI
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package barat.parser;

/* generated by Boris Bokowski's rosegen on Sat Jul 11 18:35:29 GMT+03:30 1998
*/

import barat.reflect.PrimitiveType;

public class PrimitiveTypeImpl extends ATypeImpl implements PrimitiveType
{
	private boolean isBoolean = false;
	private boolean isByte = false;
	private boolean isChar = false;
	private boolean isDouble = false;
	private boolean isFloat = false;
	private boolean isInt = false;
	private boolean isLong = false;
	private boolean isShort = false;
	public PrimitiveTypeImpl( )
	{
		super( );
	}
	public boolean isBoolean()
	{
		return isBoolean;
	}
	public void isBoolean(boolean isBoolean_)
	{
		isBoolean = isBoolean_;
	}
	public boolean isByte()
	{
		return isByte;
	}
	public void isByte(boolean isByte_)
	{
		isByte = isByte_;
	}
	public boolean isChar()
	{
		return isChar;
	}
	public void isChar(boolean isChar_)
	{
		isChar = isChar_;
	}
	public boolean isDouble()
	{
		return isDouble;
	}
	public void isDouble(boolean isDouble_)
	{
		isDouble = isDouble_;
	}
	public boolean isFloat()
	{
		return isFloat;
	}
	public void isFloat(boolean isFloat_)
	{
		isFloat = isFloat_;
	}
	public boolean isInt()
	{
		return isInt;
	}
	public void isInt(boolean isInt_)
	{
		isInt = isInt_;
	}
	public boolean isLong()
	{
		return isLong;
	}
	public void isLong(boolean isLong_)
	{
		isLong = isLong_;
	}
	public boolean isShort()
	{
		return isShort;
	}
	public void isShort(boolean isShort_)
	{
		isShort = isShort_;
	}
  //public int hashCode() { return 47110815; }

  public boolean equals(Object o) {
    if(o instanceof PrimitiveType) {
      PrimitiveType p = (PrimitiveType)o;

      if(isInt())
	return p.isInt();
      else if(isBoolean())
	return p.isBoolean();
      else if(isShort())
	return p.isShort();
      else if(isLong())
	return p.isLong();
      else if(isByte())
	return p.isByte();
      else if(isChar())
	return p.isChar();
      else if(isFloat())
	return p.isFloat();
      else if(isDouble())
	return p.isDouble();
      else
	throw new RuntimeException("Oops: equals " + this + ":" + o);
    } else
      return false;
  }

}
