/*
 * File: BinaryOperationImpl.java
 *
 * $Id: BinaryOperationImpl.java,v 1.8 2000/11/20 01:51:02 bokowski Exp $
 *
 * This file is part of Barat.
 * Copyright (c) 1998-2000 Boris Bokowski (bokowski@users.sourceforge.net)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 *
 *   Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in the
 *   documentation and/or other materials provided with the distribution.
 *
 *   Neither the name of Boris Bokowski nor the names of his contributors
 *   may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL BORIS BOKOWSKI
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package barat.parser;

/* generated by Boris Bokowski's rosegen on Sat Jul 11 18:34:46 GMT+03:30 1998
*/

import barat.reflect.BinaryOperation;
import barat.reflect.AExpression;


public class BinaryOperationImpl extends AExpressionImpl implements BinaryOperation
{
	private Attribute<AExpression> leftOperand;
	private Attribute<AExpression> rightOperand;
	private String operator = null;
	public BinaryOperationImpl( Attribute<AExpression> leftOperand_, Attribute<AExpression> rightOperand_)
	{
		super( );
		leftOperand = leftOperand_;
		if(leftOperand!=null)
			leftOperand.setupContainment(this, "leftOperand");
		rightOperand = rightOperand_;
		if(rightOperand!=null)
			rightOperand.setupContainment(this, "rightOperand");
	}
	public BinaryOperationImpl() {}
	public void setLeftOperand( Attribute<AExpression> leftOperand_ )
	{
		leftOperand = leftOperand_;
		leftOperand.setupContainment(this, "leftOperand");
	}
	public AExpression getLeftOperand()
	{
		return leftOperand.value();
	}
	public void setRightOperand( Attribute<AExpression> rightOperand_ )
	{
		rightOperand = rightOperand_;
		rightOperand.setupContainment(this, "rightOperand");
	}
	public AExpression getRightOperand()
	{
		return rightOperand.value();
	}
	public String operator()
	{
		return operator;
	}
	public void operator(String operator_)
	{
		operator = operator_;
	}
	public void accept(barat.Visitor v)
	{
		v.visitBinaryOperation(this);
	}
	public void accept(barat.parser.ImplementationVisitor v)
	{
		v.visitBinaryOperationImpl(this);
	}
}
