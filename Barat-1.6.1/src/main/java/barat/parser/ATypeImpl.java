/*
 * File: ATypeImpl.java
 *
 * $Id: ATypeImpl.java,v 1.15 2000/11/20 01:51:01 bokowski Exp $
 *
 * This file is part of Barat.
 * Copyright (c) 1998-2000 Boris Bokowski (bokowski@users.sourceforge.net)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 *
 *   Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in the
 *   documentation and/or other materials provided with the distribution.
 *
 *   Neither the name of Boris Bokowski nor the names of his contributors
 *   may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL BORIS BOKOWSKI
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package barat.parser;

/* generated by Boris Bokowski's rosegen on Sat Jul 11 18:35:38 GMT+03:30 1998
*/

import barat.reflect.AType;

import barat.reflect.PrimitiveType;
import barat.reflect.Array;

public abstract class ATypeImpl extends NodeImpl implements AType
{
	public ATypeImpl( )
	{
		super( );
	}
	public void accept(barat.Visitor v) {}
	public void accept(barat.parser.ImplementationVisitor v) {}
	public String getName()
	{
	  if(this instanceof PrimitiveType)
	  {
	    PrimitiveType p = (PrimitiveType)this;
	    if(p.isBoolean()) return "boolean";
	    if(p.isChar()) return "char";
	    if(p.isByte()) return "byte";
	    if(p.isShort()) return "short";
	    if(p.isInt()) return "int";
	    if(p.isLong()) return "long";
	    if(p.isFloat()) return "float";
	    if(p.isDouble()) return "double";
	    throw new RuntimeException("Huh?");
	  }
	  if(this instanceof Array)
	  {
	    return ((Array)this).getElementType().getName() + "[]";
	  }
	  throw new RuntimeException("getName() on type without name");
	}
        public String qualifiedName() {
          if (this instanceof Array)
            return ((Array)this).getElementType().qualifiedName() + "[]";
          else
            return getName();
        }

        public boolean isAssignableTo (AType formal) {
          return barat.parser.Typing.isAssignableTo (this, formal);
        }
        public boolean isPassableTo (AType formal) {
          return barat.parser.Typing.isPassableTo (this, formal);
        }
        public boolean isCastableTo (AType formal) {
          return barat.parser.Typing.isCastableTo (this, formal);
        }
        
        // Array objects should be unique:
        Array myArray = null;
        public Array getCorrespondingArray()
        {
          if(myArray==null)
          {
            myArray = new ArrayImpl(new Constant<AType>(this));
          }
          return myArray;
        }

        public boolean equals (Object o) {
          if (!(o instanceof AType)) 
            return false;
          else
            return barat.parser.Typing.isEqual (this, (AType)o);
        }
}
