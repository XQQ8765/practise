/*
 * File: ClassImpl.java
 *
 * $Id: ClassImpl.java,v 1.14 2000/11/20 01:51:03 bokowski Exp $
 *
 * This file is part of Barat.
 * Copyright (c) 1998-2000 Boris Bokowski (bokowski@users.sourceforge.net)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 *
 *   Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in the
 *   documentation and/or other materials provided with the distribution.
 *
 *   Neither the name of Boris Bokowski nor the names of his contributors
 *   may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL BORIS BOKOWSKI
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package barat.parser;

/* generated by Boris Bokowski's rosegen on Sat Jul 11 18:34:24 GMT+03:30 1998
*/

import barat.reflect.Class;


import barat.reflect.Field;
import barat.collections.FieldList;
import barat.collections.FieldArrayList;
import barat.collections.FieldIterator;
import barat.reflect.AbstractMethod;
import barat.collections.AbstractMethodList;
import barat.collections.AbstractMethodArrayList;
import barat.collections.AbstractMethodIterator;
import barat.reflect.Interface;

import barat.collections.InterfaceList;
import barat.collections.InterfaceArrayList;
import barat.collections.InterfaceIterator;
import barat.collections.ClassList;
import barat.collections.ClassArrayList;
import barat.collections.ClassIterator;
import barat.reflect.ConcreteMethod;
import barat.collections.ConcreteMethodList;
import barat.collections.ConcreteMethodArrayList;
import barat.collections.ConcreteMethodIterator;
import barat.reflect.Block;
import barat.collections.BlockList;
import barat.collections.BlockArrayList;
import barat.collections.BlockIterator;
import barat.reflect.Constructor;
import barat.collections.ConstructorList;
import barat.collections.ConstructorArrayList;
import barat.collections.ConstructorIterator;
import barat.reflect.AType;
import java.util.*;
//import java.util.*;

public class ClassImpl extends AUserTypeImpl implements Class
{
	private Attribute<Class> superclass;
	private List<Attribute<Interface>> implementedInterfaces = new ArrayList<Attribute<Interface>>();
	private ConcreteMethodList concreteMethods = new ConcreteMethodArrayList();
	private ConstructorList constructors = new ConstructorArrayList();
        private BlockList instanceInitializers = new BlockArrayList();
	public ClassImpl( Modifiers delegate_modifiers_, String name_, FieldList fields_, AbstractMethodList abstractMethods_, List<Attribute<Interface>> nestedInterfaces_, List<Attribute<Class>> nestedClasses_, ConcreteMethodList concreteMethods_, BlockList staticInitializers_, ConstructorList constructors_)
	{
		super( delegate_modifiers_, name_, fields_, abstractMethods_, nestedInterfaces_, nestedClasses_, staticInitializers_);
		concreteMethods = concreteMethods_;
		for(ConcreteMethodIterator i=concreteMethods.iterator(); i.hasNext();)
		{
			i.next().setupContainment(this, "concreteMethods");
		}
		constructors = constructors_;
		for(ConstructorIterator i=constructors.iterator(); i.hasNext();)
		{
			i.next().setupContainment(this, "constructors");
		}
	}
	public ClassImpl( Modifiers delegate_modifiers_, String name_, FieldList fields_, AbstractMethodList abstractMethods_, List<Attribute<Interface>> nestedInterfaces_, List<Attribute<Class>> nestedClasses_, Scope enclosingScope_, ConcreteMethodList concreteMethods_, BlockList staticInitializers_, ConstructorList constructors_)
	{
		super( delegate_modifiers_, name_, fields_, abstractMethods_, nestedInterfaces_, nestedClasses_, enclosingScope_, staticInitializers_);
		concreteMethods = concreteMethods_;
		for(ConcreteMethodIterator i=concreteMethods.iterator(); i.hasNext();)
		{
			i.next().setupContainment(this, "concreteMethods");
		}
		constructors = constructors_;
		for(ConstructorIterator i=constructors.iterator(); i.hasNext();)
		{
			i.next().setupContainment(this, "constructors");
		}
	}
	public ClassImpl( Modifiers delegate_modifiers_, String name_, FieldList fields_, AbstractMethodList abstractMethods_, List<Attribute<Interface>> nestedInterfaces_, List<Attribute<Class>> nestedClasses_, Scope enclosingScope_, Attribute<Class> superclass_, List<Attribute<Interface>> implementedInterfaces_, ConcreteMethodList concreteMethods_, BlockList staticInitializers_, ConstructorList constructors_)
	{
		super( delegate_modifiers_, name_, fields_, abstractMethods_, nestedInterfaces_, nestedClasses_, enclosingScope_, staticInitializers_);
		superclass = superclass_;
		implementedInterfaces = implementedInterfaces_;
		concreteMethods = concreteMethods_;
		for(ConcreteMethodIterator i=concreteMethods.iterator(); i.hasNext();)
		{
			i.next().setupContainment(this, "concreteMethods");
		}
		constructors = constructors_;
		for(ConstructorIterator i=constructors.iterator(); i.hasNext();)
		{
			i.next().setupContainment(this, "constructors");
		}
	}
	public ClassImpl() {}
	public void setSuperclass( Attribute<Class> superclass_ )
	{
		superclass = superclass_;
//		superclass.setupContainment(this, "superclass");
	}
	public Class getSuperclass()
	{
		if(superclass!=null) return superclass.value(); else return null;
	}
        public boolean isSubclassOf (Class superClass) {
          return barat.parser.Typing.isSubclassOf (this, superClass);
        }
	public InterfaceList getImplementedInterfaces()
	{
		InterfaceList result = new InterfaceArrayList();
		for(Iterator<Attribute<Interface>> i = implementedInterfaces.iterator(); i.hasNext();)
		{
			result.add(i.next().value());
		}
		return result;
	}
        public boolean isImplementationOf (Interface superInterface) {
          return barat.parser.Typing.isImplementationOf (this, superInterface);
        }
	public void addImplementedInterface( Attribute<Interface> implementedInterface )
	{
		implementedInterfaces.add(implementedInterface);
	}
	public void removeImplementedInterface( Attribute<Interface> implementedInterface )
	{
		implementedInterfaces.remove(implementedInterface);
	}
	public ConcreteMethodList getConcreteMethods()
	{
		return concreteMethods;
	}
	public void addConcreteMethod( ConcreteMethod concreteMethod )
	{
		concreteMethods.add(concreteMethod);
		concreteMethod.setupContainment(this, "concreteMethods");
	}
	public void removeConcreteMethod( ConcreteMethod concreteMethod )
	{
		concreteMethods.remove(concreteMethod);
	}
	public ConstructorList getConstructors()
	{
		return constructors;
	}
        public Constructor getConstructor (AType[] argTypes) {
          return barat.parser.NameAnalysis.lookupConstructor_ 
                                                         (null, this, argTypes);
        }
	public void addConstructor( Constructor constructor )
	{
		constructors.add(constructor);
		constructor.setupContainment(this, "constructors");
	}
	public void removeConstructor( Constructor constructor )
	{
		constructors.remove(constructor);
	}
        public BlockList getInstanceInitializers()
        {
          return instanceInitializers;
        }
        public void addInstanceInitializer(Block instanceInitializer)
        {
          instanceInitializers.add(instanceInitializer);
          instanceInitializer.setupContainment(this, "instanceInitializer");
        }
        private int anonymousIndex = 0;
        int getNextAnonymousIndex()
        {
          return ++anonymousIndex;
        }
	public void accept(barat.Visitor v)
	{
		v.visitClass(this);
	}
	public void accept(barat.parser.ImplementationVisitor v)
	{
		v.visitClassImpl(this);
	}
}
