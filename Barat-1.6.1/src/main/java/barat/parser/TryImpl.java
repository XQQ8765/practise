/*
 * File: TryImpl.java
 *
 * $Id: TryImpl.java,v 1.7 2000/11/20 01:51:09 bokowski Exp $
 *
 * This file is part of Barat.
 * Copyright (c) 1998-2000 Boris Bokowski (bokowski@users.sourceforge.net)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 *
 *   Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in the
 *   documentation and/or other materials provided with the distribution.
 *
 *   Neither the name of Boris Bokowski nor the names of his contributors
 *   may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL BORIS BOKOWSKI
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package barat.parser;

/* generated by Boris Bokowski's rosegen on Sat Jul 11 18:34:37 GMT+03:30 1998
*/

import barat.reflect.Try;
import barat.reflect.Catch;
import barat.collections.CatchList;
import barat.collections.CatchArrayList;
import barat.collections.CatchIterator;
import barat.reflect.Finally;
import barat.reflect.Block;

public class TryImpl extends ATargetStatementImpl implements Try
{
	private CatchList catchClauses = new CatchArrayList();
	private Finally finallyClause;
	private Block block;
	public TryImpl( CatchList catchClauses_, Finally finallyClause_, Block block_)
	{
		super( );
		catchClauses = catchClauses_;
		for(CatchIterator i=catchClauses.iterator(); i.hasNext();)
		{
			i.next().setupContainment(this, "catchClauses");
		}
		finallyClause = finallyClause_;
		if(finallyClause!=null)
			finallyClause.setupContainment(this, "finallyClause");
		block = block_;
		if(block!=null)
			block.setupContainment(this, "block");
	}
	public TryImpl() {}
	public CatchList getCatchClauses()
	{
		return catchClauses;
	}
	public void addCatchClause( Catch catchClause )
	{
		catchClauses.add(catchClause);
		catchClause.setupContainment(this, "catchClauses");
	}
	public void removeCatchClause( Catch catchClause )
	{
		catchClauses.remove(catchClause);
	}
	public void setFinallyClause( Finally finallyClause_ )
	{
		finallyClause = finallyClause_;
		if(finallyClause!=null)
			finallyClause.setupContainment(this, "finallyClause");
	}
	public Finally getFinallyClause()
	{
		return finallyClause;
	}
	public void setBlock( Block block_ )
	{
		block = block_;
		if(block!=null)
			block.setupContainment(this, "block");
	}
	public Block getBlock()
	{
		return block;
	}
	public void accept(barat.Visitor v)
	{
		v.visitTry(this);
	}
	public void accept(barat.parser.ImplementationVisitor v)
	{
		v.visitTryImpl(this);
	}
}
