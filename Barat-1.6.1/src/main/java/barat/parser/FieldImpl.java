/*
 * File: FieldImpl.java
 *
 * $Id: FieldImpl.java,v 1.13 2000/11/20 01:51:05 bokowski Exp $
 *
 * This file is part of Barat.
 * Copyright (c) 1998-2000 Boris Bokowski (bokowski@users.sourceforge.net)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 *
 *   Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in the
 *   documentation and/or other materials provided with the distribution.
 *
 *   Neither the name of Boris Bokowski nor the names of his contributors
 *   may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL BORIS BOKOWSKI
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package barat.parser;

/* generated by Boris Bokowski's rosegen on Sat Jul 11 18:34:32 GMT+03:30 1998
*/

import barat.reflect.Field;

import barat.reflect.AType;


import barat.reflect.AExpression;


public class FieldImpl extends NodeImpl implements Field, ImplATyped, ImplAHasModifier, ImplANamed
{
	private Attribute<AType> type;
	private String name;
	private Modifiers delegate_modifiers;
	private Attribute<AExpression> initializer;
	public FieldImpl( String name_, Modifiers delegate_modifiers_, Attribute<AExpression> initializer_)
	{
		super( );
		name = name_;
		delegate_modifiers = delegate_modifiers_;
		initializer = initializer_;
		if(initializer!=null)
			initializer.setupContainment(this, "initializer");
	}
	public FieldImpl( Attribute<AType> type_, String name_, Modifiers delegate_modifiers_, Attribute<AExpression> initializer_)
	{
		super( );
		type = type_;
		name = name_;
		delegate_modifiers = delegate_modifiers_;
		initializer = initializer_;
		if(initializer!=null)
			initializer.setupContainment(this, "initializer");
	}
	public FieldImpl() {}
	public void setType( Attribute<AType> type_ )
	{
		type = type_;
	}
	public AType getType()
	{
		return type.value();
	}
	public void setName( String name_ )
	{
		name = name_;
	}
	public String getName()
	{
		return name;
	}
        public String qualifiedName() 
        {
                return barat.parser.NameAnalysis.qualifiedNameOf (this);
        }
	public void setDelegate_modifiers( Modifiers delegate_modifiers_ )
	{
		delegate_modifiers = delegate_modifiers_;
	}
	public Modifiers getDelegate_modifiers()
	{
		return delegate_modifiers;
	}
		public boolean isAbstract()
	{
		return delegate_modifiers.isAbstract();
	}
		public void isAbstract(boolean isAbstract_)
	{
		delegate_modifiers.isAbstract(isAbstract_);
	}
		public boolean isFinal()
	{
		return delegate_modifiers.isFinal();
	}
		public void isFinal(boolean isFinal_)
	{
		delegate_modifiers.isFinal(isFinal_);
	}
		public boolean isNative()
	{
		return delegate_modifiers.isNative();
	}
		public void isNative(boolean isNative_)
	{
		delegate_modifiers.isNative(isNative_);
	}
		public boolean isPrivate()
	{
		return delegate_modifiers.isPrivate();
	}
		public void isPrivate(boolean isPrivate_)
	{
		delegate_modifiers.isPrivate(isPrivate_);
	}
		public boolean isProtected()
	{
		return delegate_modifiers.isProtected();
	}
		public void isProtected(boolean isProtected_)
	{
		delegate_modifiers.isProtected(isProtected_);
	}
		public boolean isPublic()
	{
		return delegate_modifiers.isPublic();
	}
		public void isPublic(boolean isPublic_)
	{
		delegate_modifiers.isPublic(isPublic_);
	}
		public boolean isStatic()
	{
		return delegate_modifiers.isStatic();
	}
		public void isStatic(boolean isStatic_)
	{
		delegate_modifiers.isStatic(isStatic_);
	}
		public boolean isSynchronized()
	{
		return delegate_modifiers.isSynchronized();
	}
		public void isSynchronized(boolean isSynchronized_)
	{
		delegate_modifiers.isSynchronized(isSynchronized_);
	}
		public boolean isTransient()
	{
		return delegate_modifiers.isTransient();
	}
		public void isTransient(boolean isTransient_)
	{
		delegate_modifiers.isTransient(isTransient_);
	}
		public boolean isVolatile()
	{
		return delegate_modifiers.isVolatile();
	}
		public void isVolatile(boolean isVolatile_)
	{
		delegate_modifiers.isVolatile(isVolatile_);
	}
		public boolean isStrictfp()
	{
		return delegate_modifiers.isStrictfp();
	}
	public void setInitializer( Attribute<AExpression> initializer_ )
	{
		initializer = initializer_;
		initializer.setupContainment(this, "initializer");
	}
	public AExpression getInitializer()
	{
		if(initializer!=null) return initializer.value(); else return null;
	}
	public void accept(barat.Visitor v)
	{
		v.visitField(this);
	}
	public void accept(barat.parser.ImplementationVisitor v)
	{
		v.visitFieldImpl(this);
	}
}
