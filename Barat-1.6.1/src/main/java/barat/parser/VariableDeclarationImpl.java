/*
 * File: VariableDeclarationImpl.java
 *
 * $Id: VariableDeclarationImpl.java,v 1.10 2000/11/20 01:51:10 bokowski Exp $
 *
 * This file is part of Barat.
 * Copyright (c) 1998-2000 Boris Bokowski (bokowski@users.sourceforge.net)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 *
 *   Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in the
 *   documentation and/or other materials provided with the distribution.
 *
 *   Neither the name of Boris Bokowski nor the names of his contributors
 *   may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL BORIS BOKOWSKI
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package barat.parser;

/* generated by Boris Bokowski's rosegen on Sat Jul 11 18:34:31 GMT+03:30 1998
*/

import barat.reflect.VariableDeclaration;
import barat.reflect.LocalVariable;

public class VariableDeclarationImpl extends AStatementImpl implements VariableDeclaration, Scope
{
	private LocalVariable variable;
	private Scope enclosingScope;
	private Function2<String,Boolean,barat.reflect.ATyped> typedFinder = null;
	private Function2<String,Boolean,barat.reflect.AUserType> userTypeFinder = null;
	public VariableDeclarationImpl( LocalVariable variable_)
	{
		super( );
		variable = variable_;
		if(variable!=null)
			variable.setupContainment(this, "variable");
	}
	public VariableDeclarationImpl( LocalVariable variable_, Scope enclosingScope_)
	{
		super( );
		variable = variable_;
		if(variable!=null)
			variable.setupContainment(this, "variable");
		enclosingScope = enclosingScope_;
	}
	public VariableDeclarationImpl() {}
	public void setVariable( LocalVariable variable_ )
	{
		variable = variable_;
	}
	public LocalVariable getVariable()
	{
		return variable;
	}
	public void setEnclosingScope( Scope enclosingScope_ )
	{
		enclosingScope = enclosingScope_;
	}
	public Scope getEnclosingScope()
	{
		return enclosingScope;
	}
	public Function2<String,Boolean,barat.reflect.ATyped> typedFinder()
	{
		return typedFinder;
	}
	public void typedFinder(Function2<String,Boolean,barat.reflect.ATyped> typedFinder_)
	{
		typedFinder = typedFinder_;
	}
	public Function2<String,Boolean,barat.reflect.AUserType> userTypeFinder()
	{
		return userTypeFinder;
	}
	public void userTypeFinder(Function2<String,Boolean,barat.reflect.AUserType> userTypeFinder_)
	{
		userTypeFinder = userTypeFinder_;
	}
	public void accept(barat.Visitor v)
	{
		v.visitVariableDeclaration(this);
	}
	public void accept(barat.parser.ImplementationVisitor v)
	{
		v.visitVariableDeclarationImpl(this);
	}
}
