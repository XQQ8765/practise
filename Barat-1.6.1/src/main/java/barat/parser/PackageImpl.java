/*
 * File: PackageImpl.java
 *
 * $Id: PackageImpl.java,v 1.16 2000/11/20 01:51:08 bokowski Exp $
 *
 * This file is part of Barat.
 * Copyright (c) 1998-2000 Boris Bokowski (bokowski@users.sourceforge.net)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 *
 *   Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in the
 *   documentation and/or other materials provided with the distribution.
 *
 *   Neither the name of Boris Bokowski nor the names of his contributors
 *   may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL BORIS BOKOWSKI
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package barat.parser;

/* generated by Boris Bokowski's rosegen on Sat Jul 11 18:34:25 GMT+03:30 1998
*/

import barat.reflect.Package;

import barat.reflect.Interface;

import barat.collections.InterfaceList;
import barat.collections.InterfaceArrayList;
import barat.collections.InterfaceIterator;
import barat.reflect.Class;

import barat.collections.ClassList;
import barat.collections.ClassArrayList;
import barat.collections.ClassIterator;
import barat.QualifiedName;
import java.util.*;
//import java.util.*;

public class PackageImpl extends NodeImpl implements Package, Scope
{
	private List<Attribute<Interface>> interfaces = new ArrayList<Attribute<Interface>>();
	private List<Attribute<Class>> classes = new ArrayList<Attribute<Class>>();
	private QualifiedName qualifiedName;
	private Scope enclosingScope;
	private Function2<String,Boolean,barat.reflect.ATyped> typedFinder = null;
	private Function2<String,Boolean,barat.reflect.AUserType> userTypeFinder = null;
        
        private boolean allClassesLoaded = false;
        
	public PackageImpl( QualifiedName qualifiedName_)
	{
		super( );
		qualifiedName = qualifiedName_;
	}
	public PackageImpl( QualifiedName qualifiedName_, Scope enclosingScope_)
	{
		super( );
		qualifiedName = qualifiedName_;
		enclosingScope = enclosingScope_;
	}
	public PackageImpl( List<Attribute<Interface>> interfaces_, List<Attribute<Class>> classes_, QualifiedName qualifiedName_, Scope enclosingScope_)
	{
		super( );
		interfaces = interfaces_;
		classes = classes_;
		qualifiedName = qualifiedName_;
		enclosingScope = enclosingScope_;
	}
	public PackageImpl() {}
	InterfaceList getInterfaces(boolean triggerLoading)
	{
                if(triggerLoading && !allClassesLoaded)
                {
                  NameAnalysis.loadPackageFiles(this);
                  allClassesLoaded=true;
                }
		InterfaceList result = new InterfaceArrayList();
		for(Iterator<Attribute<Interface>> i = interfaces.iterator(); i.hasNext();)
		{
			result.add(i.next().value());
		}
		return result;
	}
	public InterfaceList getInterfaces()
	{
          return getInterfaces(true);
        }
	public void addInterface_( Attribute<Interface> interface_ )
	{
//	  interface_.setupContainment(this, "interface_");
		interfaces.add(interface_);
	}
	public void removeInterface_( Attribute<Interface> interface_ )
	{
		interfaces.remove(interface_);
	}
	ClassList getClasses(boolean triggerLoading)
	{
                if(triggerLoading && !allClassesLoaded)
                {
                  NameAnalysis.loadPackageFiles(this);
                  allClassesLoaded=true;
                }
		ClassList result = new ClassArrayList();
		for(Iterator<Attribute<Class>> i = classes.iterator(); i.hasNext();)
		{
			result.add(i.next().value());
		}
		return result;
	}
	public ClassList getClasses()
	{
                return getClasses(true);
	}
	public void addClass_( Attribute<Class> class_ )
	{
//	  class_.setupContainment(this, "class_");
		classes.add(class_);
	}
	public void removeClass_( Attribute<Class> class_ )
	{
		classes.remove(class_);
	}
	public void setQualifiedName( QualifiedName qualifiedName_ )
	{
		qualifiedName = qualifiedName_;
	}
	public QualifiedName getQualifiedName()
	{
		return qualifiedName;
	}

  public String toString() {
    return qualifiedName.toString();
  }

	public void setEnclosingScope( Scope enclosingScope_ )
	{
		enclosingScope = enclosingScope_;
	}
	public Scope getEnclosingScope()
	{
		return enclosingScope;
	}
	public Function2<String,Boolean,barat.reflect.ATyped> typedFinder()
	{
		return typedFinder;
	}
	public void typedFinder(Function2<String,Boolean,barat.reflect.ATyped> typedFinder_)
	{
		typedFinder = typedFinder_;
	}
	public Function2<String,Boolean,barat.reflect.AUserType> userTypeFinder()
	{
		return userTypeFinder;
	}
	public void userTypeFinder(Function2<String,Boolean,barat.reflect.AUserType> userTypeFinder_)
	{
		userTypeFinder = userTypeFinder_;
	}
	public void accept(barat.Visitor v)
	{
		v.visitPackage(this);
	}
	public void accept(barat.parser.ImplementationVisitor v)
	{
		v.visitPackageImpl(this);
	}
}
