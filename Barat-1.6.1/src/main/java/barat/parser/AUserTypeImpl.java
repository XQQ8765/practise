/*
 * File: AUserTypeImpl.java
 *
 * $Id: AUserTypeImpl.java,v 1.21 2003/07/24 12:13:48 bokowski Exp $
 *
 * This file is part of Barat.
 * Copyright (c) 1998-2000 Boris Bokowski (bokowski@users.sourceforge.net)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 *
 *   Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in the
 *   documentation and/or other materials provided with the distribution.
 *
 *   Neither the name of Boris Bokowski nor the names of his contributors
 *   may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL BORIS BOKOWSKI
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package barat.parser;

/* generated by Boris Bokowski's rosegen on Sat Jul 11 18:35:38 GMT+03:30 1998
*/

import barat.reflect.AUserType;

import barat.reflect.Field;
import barat.collections.FieldList;
import barat.collections.FieldArrayList;
import barat.collections.FieldIterator;
import barat.reflect.AbstractMethod;
import barat.collections.AbstractMethodList;
import barat.collections.AbstractMethodArrayList;
import barat.collections.AbstractMethodIterator;
import barat.reflect.Interface;

import barat.collections.InterfaceList;
import barat.collections.InterfaceArrayList;
import barat.collections.InterfaceIterator;
import barat.reflect.Class;

import barat.collections.ClassList;
import barat.collections.ClassArrayList;
import barat.collections.ClassIterator;
import barat.reflect.AMethod;

import barat.reflect.Block;
import barat.collections.BlockList;
import barat.collections.BlockArrayList;
import barat.collections.BlockIterator;
import java.util.*;
//import java.util.*;

public abstract class AUserTypeImpl extends AReferenceTypeImpl implements AUserType, Scope, ImplAHasModifier
{
	private BlockList staticInitializers = new BlockArrayList();
	private Modifiers delegate_modifiers;
	private String name;
	private FieldList fields = new FieldArrayList();
	private AbstractMethodList abstractMethods = new AbstractMethodArrayList();
	private List<Attribute<Interface>> nestedInterfaces = new ArrayList<Attribute<Interface>>();
	private List<Attribute<Class>> nestedClasses = new ArrayList<Attribute<Class>>();
	private Scope enclosingScope;
        private Attribute<List<AMethod>> methodList;
        void setMethodList(Attribute<List<AMethod>> methodList_)
        {
          methodList = methodList_;
        }
        List<AMethod> getMethodList()
        {
          return methodList.value();
        }
	private Function2<String,Boolean,barat.reflect.ATyped> typedFinder = null;
	private Function2<String,Boolean,barat.reflect.AUserType> userTypeFinder = null;
	public AUserTypeImpl( Modifiers delegate_modifiers_, String name_, FieldList fields_, AbstractMethodList abstractMethods_, List<Attribute<Interface>> nestedInterfaces_, List<Attribute<Class>> nestedClasses_, BlockList staticInitializers_)
	{
		super( );
		delegate_modifiers = delegate_modifiers_;
		name = name_;
		fields = fields_;
		for(FieldIterator i=fields.iterator(); i.hasNext();)
		{
			i.next().setupContainment(this, "fields");
		}
		abstractMethods = abstractMethods_;
		for(AbstractMethodIterator i=abstractMethods.iterator(); i.hasNext();)
		{
			i.next().setupContainment(this, "abstractMethods");
		}
		nestedInterfaces = nestedInterfaces_;
		for(Iterator<Attribute<Interface>> i=nestedInterfaces.iterator(); i.hasNext();)
		{
			i.next().setupContainment(this, "nestedInterfaces");
		}
		nestedClasses = nestedClasses_;
		for(Iterator<Attribute<Class>> i=nestedClasses.iterator(); i.hasNext();)
		{
			i.next().setupContainment(this, "nestedClasses");
		}
		staticInitializers = staticInitializers_;
		for(BlockIterator i=staticInitializers.iterator(); i.hasNext();)
		{
			i.next().setupContainment(this, "staticInitializers");
		}
	}
	public AUserTypeImpl( Modifiers delegate_modifiers_, String name_, FieldList fields_, AbstractMethodList abstractMethods_, List<Attribute<Interface>> nestedInterfaces_, List<Attribute<Class>> nestedClasses_, Scope enclosingScope_, BlockList staticInitializers_)
	{
		super( );
		delegate_modifiers = delegate_modifiers_;
		name = name_;
		fields = fields_;
		for(FieldIterator i=fields.iterator(); i.hasNext();)
		{
			i.next().setupContainment(this, "fields");
		}
		abstractMethods = abstractMethods_;
		for(AbstractMethodIterator i=abstractMethods.iterator(); i.hasNext();)
		{
			i.next().setupContainment(this, "abstractMethods");
		}
		nestedInterfaces = nestedInterfaces_;
		for(Iterator<Attribute<Interface>> i=nestedInterfaces.iterator(); i.hasNext();)
		{
			i.next().setupContainment(this, "nestedInterfaces");
		}
		nestedClasses = nestedClasses_;
		for(Iterator<Attribute<Class>> i=nestedClasses.iterator(); i.hasNext();)
		{
			i.next().setupContainment(this, "nestedClasses");
		}
		enclosingScope = enclosingScope_;
		staticInitializers = staticInitializers_;
		for(BlockIterator i=staticInitializers.iterator(); i.hasNext();)
		{
			i.next().setupContainment(this, "staticInitializers");
		}
	}
	public AUserTypeImpl() {}
	public void setDelegate_modifiers( Modifiers delegate_modifiers_ )
	{
		delegate_modifiers = delegate_modifiers_;
	}
	public Modifiers getDelegate_modifiers()
	{
		return delegate_modifiers;
	}
		public boolean isAbstract()
	{
		return delegate_modifiers.isAbstract();
	}
		public void isAbstract(boolean isAbstract_)
	{
		delegate_modifiers.isAbstract(isAbstract_);
	}
		public boolean isFinal()
	{
		return delegate_modifiers.isFinal();
	}
		public void isFinal(boolean isFinal_)
	{
		delegate_modifiers.isFinal(isFinal_);
	}
		public boolean isNative()
	{
		return delegate_modifiers.isNative();
	}
		public void isNative(boolean isNative_)
	{
		delegate_modifiers.isNative(isNative_);
	}
		public boolean isPrivate()
	{
		return delegate_modifiers.isPrivate();
	}
		public void isPrivate(boolean isPrivate_)
	{
		delegate_modifiers.isPrivate(isPrivate_);
	}
		public boolean isProtected()
	{
		return delegate_modifiers.isProtected();
	}
		public void isProtected(boolean isProtected_)
	{
		delegate_modifiers.isProtected(isProtected_);
	}
		public boolean isPublic()
	{
		return delegate_modifiers.isPublic();
	}
		public void isPublic(boolean isPublic_)
	{
		delegate_modifiers.isPublic(isPublic_);
	}
		public boolean isStatic()
	{
		return delegate_modifiers.isStatic();
	}
		public void isStatic(boolean isStatic_)
	{
		delegate_modifiers.isStatic(isStatic_);
	}
		public boolean isSynchronized()
	{
		return delegate_modifiers.isSynchronized();
	}
		public void isSynchronized(boolean isSynchronized_)
	{
		delegate_modifiers.isSynchronized(isSynchronized_);
	}
		public boolean isTransient()
	{
		return delegate_modifiers.isTransient();
	}
		public void isTransient(boolean isTransient_)
	{
		delegate_modifiers.isTransient(isTransient_);
	}
		public boolean isVolatile()
	{
		return delegate_modifiers.isVolatile();
	}
		public void isVolatile(boolean isVolatile_)
	{
		delegate_modifiers.isVolatile(isVolatile_);
	}
		public boolean isStrictfp()
	{
		return delegate_modifiers.isStrictfp();
	}
		public void isStrictfp(boolean isStrictfp_)
	{
		delegate_modifiers.isStrictfp(isStrictfp_);
	}
	public void setName( String name_ )
	{
		name = name_;
	}
	public String getName()
	{
		return name;
	}
        public String qualifiedName() 
        {
                return barat.parser.NameAnalysis.qualifiedNameOf (this);
        }
	public FieldList getFields()
	{
		return fields;
	}
	public void addField( Field field )
	{
		fields.add(field);
		field.setupContainment(this, "fields");
	}
	public void removeField( Field field )
	{
		fields.remove(field);
	}
	public AbstractMethodList getAbstractMethods()
	{
		return abstractMethods;
	}
	public void addAbstractMethod( AbstractMethod abstractMethod )
	{
		abstractMethods.add(abstractMethod);
		abstractMethod.setupContainment(this, "abstractMethods");
	}
	public void removeAbstractMethod( AbstractMethod abstractMethod )
	{
		abstractMethods.remove(abstractMethod);
	}
	public InterfaceList getNestedInterfaces()
	{
		InterfaceList result = new InterfaceArrayList();
		for(Iterator<Attribute<Interface>> i = nestedInterfaces.iterator(); i.hasNext();)
		{
			result.add(i.next().value());
		}
		return result;
	}
	public void addNestedInterface( Attribute<Interface> nestedInterface )
	{
		nestedInterfaces.add(nestedInterface);
		nestedInterface.setupContainment(this, "nestedInterfaces");
	}
	public void removeNestedInterface( Attribute<Interface> nestedInterface )
	{
		nestedInterfaces.remove(nestedInterface);
	}
	public ClassList getNestedClasses()
	{
		ClassList result = new ClassArrayList();
		for(Iterator<Attribute<Class>> i = nestedClasses.iterator(); i.hasNext();)
		{
			result.add(i.next().value());
		}
		return result;
	}
	public void addNestedClasse( Attribute<Class> nestedClasse )
	{
		nestedClasses.add(nestedClasse);
		nestedClasse.setupContainment(this, "nestedClasses");
	}
	public void removeNestedClasse( Attribute<Class> nestedClasse )
	{
		nestedClasses.remove(nestedClasse);
	}
	public void setEnclosingScope( Scope enclosingScope_ )
	{
		enclosingScope = enclosingScope_;
	}
	public Scope getEnclosingScope()
	{
		return enclosingScope;
	}
	public Function2<String,Boolean,barat.reflect.ATyped> typedFinder()
	{
		return typedFinder;
	}
	public void typedFinder(Function2<String,Boolean,barat.reflect.ATyped> typedFinder_)
	{
		typedFinder = typedFinder_;
	}
	public Function2<String,Boolean,barat.reflect.AUserType> userTypeFinder()
	{
		return userTypeFinder;
	}
	public void userTypeFinder(Function2<String,Boolean,barat.reflect.AUserType> userTypeFinder_)
	{
		userTypeFinder = userTypeFinder_;
	}
	public BlockList getStaticInitializers()
	{
		return staticInitializers;
	}
	public void addStaticInitializer( Block staticInitializer )
	{
		staticInitializers.add(staticInitializer);
		staticInitializer.setupContainment(this, "staticInitializers");
	}
	public void removeStaticInitializer( Block staticInitializer )
	{
		staticInitializers.remove(staticInitializer);
	}
	public AUserType getNestedUserType(String name) {
		for(ClassIterator i=getNestedClasses().iterator(); i.hasNext();)
		{
		  Class c = i.next();
		  if(name.equals(c.getName())) return c;
		}
		for(InterfaceIterator i=getNestedInterfaces().iterator(); i.hasNext();)
		{
		  Interface c = i.next();
		  if(name.equals(c.getName())) return c;
		}
		return null;
	}
	abstract public void accept(barat.Visitor v);
	abstract public void accept(barat.parser.ImplementationVisitor v);
}
