/*
 * File: AssignmentImpl.java
 *
 * $Id: AssignmentImpl.java,v 1.8 2000/11/20 01:51:02 bokowski Exp $
 *
 * This file is part of Barat.
 * Copyright (c) 1998-2000 Boris Bokowski (bokowski@users.sourceforge.net)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 *
 *   Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in the
 *   documentation and/or other materials provided with the distribution.
 *
 *   Neither the name of Boris Bokowski nor the names of his contributors
 *   may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL BORIS BOKOWSKI
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package barat.parser;

/* generated by Boris Bokowski's rosegen on Sat Jul 11 18:34:45 GMT+03:30 1998
*/

import barat.reflect.Assignment;
import barat.reflect.AExpression;

import barat.reflect.ALValue;


public class AssignmentImpl extends AOperandExpressionImpl implements Assignment
{
	private Attribute<ALValue> lvalue;
	private String operator = null;
	public AssignmentImpl( Attribute<AExpression> operand_, Attribute<ALValue> lvalue_)
	{
		super( operand_);
		lvalue = lvalue_;
		if(lvalue!=null)
			lvalue.setupContainment(this, "lvalue");
	}
	public AssignmentImpl() {}
	public void setLvalue( Attribute<ALValue> lvalue_ )
	{
		lvalue = lvalue_;
		lvalue.setupContainment(this, "lvalue");
	}
	public ALValue getLvalue()
	{
		return lvalue.value();
	}
	public String operator()
	{
		return operator;
	}
	public void operator(String operator_)
	{
		operator = operator_;
	}
	public void accept(barat.Visitor v)
	{
		v.visitAssignment(this);
	}
	public void accept(barat.parser.ImplementationVisitor v)
	{
		v.visitAssignmentImpl(this);
	}
}
